{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_\\\u00b7]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Modding The Binding of Isaac can be fun, but it can also be complicated and esoteric. While the community documentation is an invaluable resource, there are some hidden bits of knowledge that simply don't have a place there that are still incredibly useful to know. The goal of Isaac Blueprints is to create a single resource with tutorials on numerous topics, from the nichest interactions to the most common questions.</p> <p>Curated by the community, anyone can contribute: even you!</p>","boost":-999},{"location":"#crash-course","title":"Crash course","text":"<p>Isaac Blueprints offers a full series of tutorials to get started with modding. Below is a table of contents:</p> Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol>","boost":-999},{"location":"#resources","title":"Resources","text":"<ul> <li>wofsauge's community documentation is the cornerstone of Isaac modding. If you're ever unsure about something, this is a good place to look.</li> <li>catinsurance's tutorial series covers the basics and not much else. Written versions of these tutorials can be found on this website.</li> <li>Further resources can be found by clicking here.</li> </ul>","boost":-999},{"location":"#support","title":"Support","text":"<p>I pay for the hosting for this website out of pocket. Support me on Ko-Fi if you feel like it: https://ko-fi.com/catinsurance</p>","boost":-999},{"location":"contribution_guide/","title":"Contribution guide","text":"<p>Thanks for showing interest in contributing to Isaac Blueprints! This guide will serve as a quick start to creating articles, as well as a good formatting example itself.</p>","tags":["Tutorial","No Lua"]},{"location":"contribution_guide/#contributing","title":"Contributing","text":"<p>To get started, create a fork of the Isaac Blueprints repository on Github. Then, clone this respository to your desktop.</p> <p></p> <p>To start writing an article or making an edit to an existing one, you should first create a branch that contains the changes you'll be making. After that, create a Markdown file in an appropriate subfolder within <code>docs/tutorials</code>. Isaac Blueprints is built using Markdown and Material for MkDocs.</p> <p>If you want to add images, gifs, or other files to your article, create a new folder within <code>docs/tutorials/assets</code> named after your article's name. Use snake_case for naming any new files.</p> <p>If creating a new article, please add the appropriate metadata at the top so that the header can be generated properly. It should have the following properties:</p> <ul> <li>An <code>article</code> property with the name of the article. This appears in the primary header.</li> <li>An <code>authors</code> property with the creator(s) of article. Separate multiple authors with commas (i.e. <code>authors: joe, bob</code>).</li> <li>A <code>blurb</code> property with a short blurb to appear in external embeds (such as on Discord). This should usually be just a single sentence stating what the article covers. We usually have blurbs for tutorials start with the word \"learn\", but this is not required. <code>More Binding of Isaac modding tutorials on numerous topics can be found on Isaac Blueprints.</code> is appended at the end of your blurb, so there's no need to add this yourself.</li> <li>A <code>comments</code> property for if you want comments to be enabled. This should be <code>true</code> or <code>false</code>, and should be left as <code>true</code> under most circumstances.</li> <li>A <code>tags</code> property with a list of tags.</li> </ul> <p></p> List of tags <p>The following are the allowed tags:</p> <ul> <li>Beginner friendly</li> <li>Intermediate</li> <li>Advanced</li> <li>Tutorial</li> <li>Video</li> <li>Lua</li> <li>No Lua</li> <li>Sprites</li> <li>XML</li> <li>Repentance</li> <li>Repentance+</li> <li>REPENTOGON</li> </ul> <p>When you're ready to submit your changes for review, create a pull request on Isaac Blueprints respository using your branch. Your changes will be reviewed by a repository maintainer (usually catinsurance).</p>","tags":["Tutorial","No Lua"]},{"location":"contribution_guide/#hosting-the-docs-locally","title":"Hosting the docs locally","text":"<p>It is recommended to host the docs locally before creating a pull request with your changes in order to preview the formatting. To host the docs locally, follow these steps:</p> <ol> <li>Make sure you have Python downloaded. If on Windows, make sure it was added to PATH. Python does this automatically upon downloading it, as long as you ticked the box.</li> <li>Navigate to repository's directory on your PC with command prompt, and type the follow in order to automatically download all necessary packages. <pre><code>py -m pip install ./requirements.txt\n</code></pre> </li> <li>While still in the directory in command prompt, type <code>mkdocs serve</code> to host the site.</li> <li>Visit <code>localhost:8000</code> in your browser to see the site!</li> </ol>","tags":["Tutorial","No Lua"]},{"location":"contribution_guide/#article-guidelines","title":"Article guidelines","text":"<ul> <li>Avoid first-person pronouns in articles such as \"I\", \"we\", or \"my\".</li> <li>Keep articles objective! Try to avoid inserting opinionated statements. If an article requires you to say something opinionated, please denote that what you are saying is not fact.<ul> <li>Adding on to this, avoid opinionated language such as \"it is recommended\". Instead, give examples on why such a thing is recommended and allow the reader to come to that conclusion themselves.</li> </ul> </li> <li>Pay attention to grammar and spelling.</li> <li>Every article should have a short preamble explaining what it's about. Use this to establish the article, but avoid providing information that the reader most likely already knows if they've played the game.</li> <li>When talking about REPENTOGON in an article not exclusively focused around something regarding it, please use the   REPENTOGON emoji (<code>:modding-repentogon:</code>) before the sentence mentioning it.</li> <li>When referencing an API method for the first time, please create a hyperlink (<code>[text](https://www.example.com/)</code>) to its description in the community docs. This should also be done when referencing an external resource for the first time. After linking things once, there is no need to link it again. Avoid using the <code>moddingofisaac.com</code> mirror of the docs as it is outdated.</li> </ul>","tags":["Tutorial","No Lua"]},{"location":"contribution_guide/#choosing-what-information-to-provide","title":"Choosing what information to provide","text":"<p>Blueprints attempts to be the definitive resource for each topic it covers. To maintain this, we ask that you include and test every aspect of what you're writing about. For example, articles dealing with xml should provide information on every attribute a tag can have, even if some of those attributes have niche use cases.</p> <p>Another thing to keep in mind is that a lot of readers might be new to modding in general, and may be unfamiliar with certain concepts (e.g. game ticks vs. render ticks). Try and explain how these concepts are relevant to the topic whenever necessary.</p> <p>Additionally, try and avoid redundancy. There is a delicate balance to find between informational vs. redundant sentences. This balance might be hard to grasp at first, and becomes easier to understand as you write more.</p>","tags":["Tutorial","No Lua"]},{"location":"contribution_guide/#formatting","title":"Formatting","text":"<ul> <li>A Markdown formatting cheat sheet can be found here.</li> <li>When making a header for a section, use two hash symbols (<code>##</code>) instead of one.</li> <li>Collapsable sections are great for very long sections that can make scrolling back and forth difficult. Prime examples include tables explaining a long list of attributes. You can create an info, warning, or bug collapsable using the following system:</li> </ul> Collapsable info <pre><code>???- info \"Closed info collapsable\"\n    This is a closed info collapsable!\n\n???+ info \"Opened info collapsable\"\n    This is a opened info collapsable!\n</code></pre> Collapsable warning <pre><code>???+ warning \"Opened warning collapsable\"\n    This is a opened warning collapsable!\n\n???- warning \"Closed warning collapsable\"\n    This is a closed warning collapsable!\n</code></pre> Collapsable bug <pre><code>???+ bug \"Opened bug collapsable\"\n    This is a opened error collapsable!\n\n???+ bug \"Closed bug collapsable\"\n    This is a closed bug collapsable!\n</code></pre> <p>Additionally, try and avoid creating very large paragraphs. How people read online is different than with a book, and your article becomes a lot more approachable when paragraphs are split up efficiently.</p> <p></p>","tags":["Tutorial","No Lua"]},{"location":"navigation/","title":"Navigation","text":"<ul> <li>Home</li> <li>Contribution guide</li> <li>Resources</li> <li>Crash course<ul> <li>Creating a mod</li> <li>Uploading a mod</li> <li>Passive items</li> <li>Active items</li> <li>Item pools</li> <li>Costumes</li> <li>Characters</li> <li>Entity Basics</li> <li>Creating enemies</li> <li>Challenges</li> <li>Sounds</li> </ul> </li> <li>Basics<ul> <li>./tutorials/basics/*</li> </ul> </li> <li>General<ul> <li>./tutorials/general/*</li> </ul> </li> <li>Concepts<ul> <li>./tutorials/concepts/*</li> </ul> </li> <li>Entities<ul> <li>./tutorials/entities/*</li> </ul> </li> <li>REPENTOGON<ul> <li>./tutorials/repentogon/*</li> </ul> </li> </ul>","boost":-999},{"location":"resources/","title":"Resources","text":"","tags":["No Lua","Lua","Repentance","Repentance+","REPENTOGON"]},{"location":"resources/#communities","title":"Communities","text":"<ul> <li> <p>Modding of Isaac</p> <ul> <li>Description: The largest Discord community dedicated to Isaac modding.</li> </ul> </li> <li> <p>The Binding of Isaac Official Discord</p> <ul> <li>Description: While not centered around modding, there are two modding-related channels that you can discuss in.</li> </ul> </li> </ul>","tags":["No Lua","Lua","Repentance","Repentance+","REPENTOGON"]},{"location":"resources/#libraries","title":"Libraries","text":"<ul> <li> <p>StageAPI</p> <ul> <li>Creators: DeadInfinity</li> <li>Description: A way to create custom stages, custom grid entities, and much more. Has little documentation and requires the ability to read its code.</li> </ul> </li> <li> <p>Custom Health API (CHAPI)</p> <ul> <li>Creators: TaigaTreant</li> <li>Description: A complete rewrite of the HP system that allows custom health types and more.</li> </ul> </li> <li> <p>IsaacSaveManager</p> <ul> <li>Creators: benevolusgoat, catinsurance</li> <li>Description: A robust save manager that requires no other dependencies.</li> </ul> </li> <li> <p>HudHelper</p> <ul> <li>Creators: CatWiz, benevolusgoat</li> <li>Description: A compact feature-filled HUD rendering tool.</li> </ul> </li> <li> <p>StatusEffectLibrary</p> <ul> <li>Creator: benevolusgoat</li> <li>Description: Simplies the process for adding status effects to enemies and players.</li> </ul> </li> <li> <p>JumpLib</p> <ul> <li>Creator: kerkel</li> <li>Description: Enables entities to move along a z-axis, offering extensive customization and functionality while addressing common compatibility issues across mods that implement their own z-positioning systems systems.</li> </ul> </li> <li> <p>ThrowableItemLib</p> <ul> <li>Creator: kerkel</li> <li>Description: Easily create active items and consumables that follow the lift, hide, and throw behavior of items like Bob's Rotten Head or The Candle.</li> </ul> </li> </ul>","tags":["No Lua","Lua","Repentance","Repentance+","REPENTOGON"]},{"location":"resources/#videos","title":"Videos","text":"<ul> <li>catinsurance's Repentance Modding Tutorials<ul> <li>Creator: catinsurance</li> <li>Description: A video tutorial series on modding The Binding of Isaac: Repentance. Still applicable for Repentance+.</li> </ul> </li> </ul>","tags":["No Lua","Lua","Repentance","Repentance+","REPENTOGON"]},{"location":"resources/#tools","title":"Tools","text":"<ul> <li> <p>REPENTOGON</p> <ul> <li>Description: A mod which expands the vanilla modding API with hundreds of new or improved functions, new callbacks, and more.</li> </ul> </li> <li> <p>Basement Renovator</p> <ul> <li>Creators: budjmt, Zamiel, Tempus</li> <li>Description: An unofficial room editor, making it easy to create rooms. It was even used to make all base Repentance rooms.</li> </ul> </li> <li> <p>Anm2ed</p> <ul> <li>Creator: ShweetsStuff</li> <li>Description: A reimplementation of The Binding of Isaac: Rebirth's proprietary animation editor. Manipulates the XML-based \".anm2\" format, used for in-game tweened animations.</li> </ul> </li> <li> <p>Binding of Isaac Lua API</p> <ul> <li>Creators: fillioax, benevolusgoat</li> <li>Description: A VSCode Extension to add support and autocomplete for the The Binding of Isaac: Repentance modding API to the Lua Language Server by Sumneko.</li> </ul> </li> <li> <p>EzItems</p> <ul> <li>Creators: ddeeddii</li> <li>Description: An easy way to make mods that change an item's name and description without causing incompatibilities.</li> </ul> </li> </ul>","tags":["No Lua","Lua","Repentance","Repentance+","REPENTOGON"]},{"location":"resources/#websites","title":"Websites","text":"<ul> <li> <p>Wofsauge's Community Documentation</p> <ul> <li>Creator: wofsauge</li> <li>Description: A community project centered around documenting the vanilla API, as the official documentation found in the files is outdated and has very few descriptions.</li> </ul> </li> <li> <p>Vanilla Isaac Wiki</p> <ul> <li>Description: The official Isaac wiki.</li> </ul> </li> <li> <p>IsaacGuru's Item Laboratory</p> <ul> <li>Creator: IsaacGuru</li> <li>Description: Contains both vanilla and modded content in a one-page icon-selection format, displaying information in a condensed format for ease-of-access and readability.</li> </ul> </li> <li> <p>Modding of Isaac Wiki</p> <ul> <li>Creator: Andre Doruk</li> <li>Description: Serves as a \"home\" for mod creators to create wikis for their own mods.</li> </ul> </li> <li> <p>Unofficial Repentance API Issue Tracker</p> <ul> <li>Creator: fly_6</li> <li>Description: A comprehensive bug tracker for the modding API that is sometimes checked by Nicalis developers.</li> </ul> </li> </ul>","tags":["No Lua","Lua","Repentance","Repentance+","REPENTOGON"]},{"location":"resources/#mods","title":"Mods","text":"<ul> <li> Cat Mod Tools<ul> <li>Creator: catinsurance</li> <li>Description: A collection of mods created with REPENTOGON's ImGui feature to assist with.</li> </ul> </li> </ul>","tags":["No Lua","Lua","Repentance","Repentance+","REPENTOGON"]},{"location":"hidden/crash_course_toc/","title":"Crash course toc","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol>","boost":-999},{"location":"hidden/repentogon_notice/","title":"Repentogon notice","text":"REPENTOGON article <p>This article focuses on working with REPENTOGON features.</p>","boost":-999},{"location":"hidden/unfinished_notice/","title":"Unfinished notice","text":"Work in progress! <p>This article is a work in progress! Some sections may be incomplete or need revising.</p>","boost":-999},{"location":"tutorials/basics/creating_item_wisps/","title":"Creating item wisps","text":"<p>Wisps are a type of familiar introduced in the Repentance DLC which can be spawned by the Book of Virtues item. Nearly every active item has an associated wisp with custom effects reminiscent of the active item. Isaac's modding API has a robust system for adding custom wisps for your own modded active items.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/creating_item_wisps/#registering-the-wisp","title":"Registering the wisp","text":"<p>The first step to creating a custom wisp is to have it registered in a <code>wisps.xml</code> file present in your mod's <code>content</code> folder. The basic structure of a <code>wisps.xml</code> file looks like this:</p> <pre><code>&lt;wisps gfxroot=\"gfx/familiar/wisps/\"&gt;\n    &lt;color name=\"flame_blue\" r=\"152\" g=\"330\" b=\"458\"/&gt;\n    &lt;color name=\"core_blue\" r=\"255\" g=\"356\" b=\"510\"/&gt;\n    &lt;color name=\"tear_blue\" or=\"64\" og=\"89\" ob=\"128\"/&gt;\n\n    &lt;wisp id=\"1\" hp=\"2\" damage=\"3\" layer=\"1\" flameColor=\"flame_blue\" coreColor=\"core_blue\" tearColor=\"tear_blue\" /&gt;\n&lt;/wisps&gt;\n</code></pre> <p>For every XML file, there is a tag that goes from the start of the file to the end of the file, and multiple \"child tags\" that act as the individual entries. In this instance, <code>wisps.xml</code> entries will start with <code>&lt;wisps&gt;</code> and end with <code>&lt;/wisps&gt;</code>. There are two main child tags in this file to keep note of: the <code>color</code> tag and <code>wisp</code> tag.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/creating_item_wisps/#the-color-tag","title":"The <code>color</code> tag","text":"<p>The <code>color</code> tag stores a color for use inside your <code>wisps.xml</code> file, with a given <code>name</code> and RGB color values. The RGB attributes that can be entered are <code>r</code>, <code>g</code>, <code>b</code>, <code>or</code>, <code>og</code>, <code>ob</code>, <code>cr</code>, <code>cg</code>, <code>cb</code>, and <code>ca</code>. Each of these attributes accept an integer value from 0 to 255.</p> <p>Similar to the <code>Color</code> class in the API, each of these attributes correspond to a member of the <code>Color</code> object. <code>r</code>, <code>g</code>, and <code>b</code> control the wisp's tint, <code>or</code>, <code>og</code>, and <code>ob</code> control the wisp's color offset, and <code>cr</code>, <code>cg</code>, <code>cb</code>, and <code>ca</code> control the wisp's colorize.</p> <p>Note that the color defined in xml will not affect the wisp entity's <code>Color</code> value in game. In this example, the wisp would have a blue color in game while having its <code>Color</code> equal to <code>Color.Default</code> (<code>Color(1, 1, 1, 1)</code>).</p> Warning <p>If a wisp attempts to reference a color tag that has not been defined in the same file, it will instead default to a teal color. To avoid this from occurring on accident, and for ease of use, it's convenient to copy the <code>color</code> tags at the top of the game's <code>wisps.xml</code> file, present in the <code>resources</code> folder (<code>resources-dlc3</code> for Repentance users and <code>extracted_resources</code> for Repentance+ users). </p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/creating_item_wisps/#the-wisp-tag","title":"The <code>wisp</code> tag","text":"<p>The <code>wisp</code> tag is where the appearance and behavior of a wisp is defined, and is how it is linked to your active item. The tag has several attributes to control these factors. A comprehensive list of the purpose for each attribute will be listed below.</p> <code>wisp</code> tag variables Attribute Value Type Description Example id integer Links the defined wisp to your item. The id value should be the same one the item has defined in its <code>items.xml</code> entry. <code>id=\"1\"</code> flameColor string The color of the wisp's flame. Uses the name of a color tag defined earlier in the file. <code>flameColor=\"flame_blue\"</code> coreColor string The color of the wisp's core. Uses the name of a color tag defined earlier in the file. <code>coreColor=\"core_blue\"</code> tearColor string The color of the tears shot by the wisp. Uses the name of a color tag defined earlier in the file. <code>tearColor=\"tear_blue\"</code> coreGfx string Changes the appearance of the wisp's core. Uses a file path to a .png that is relative to the location defined by the parent <code>wisps</code> tag's <code>gfxroot</code>. <code>coreGfx=\"cross.png\"</code> hp float Defines the wisp's maximum hitpoints. Each projectile the wisp blocks causes it to lose 1 hp, while taking contact damage causes it to lose 2 hp. Default wisps have an hp value of 2. When deciding on an hp value for your wisp, keep in mind that vanilla active items with lower charge tend to have lower max hp, while higher charge or single use actives have higher max hp. <code>hp=\"3\"</code> damage float Defines the damage the wisp's tears deal. Default is 3. This value does not affect the amount of damage wisps deal on contact with enemies. <code>damage=\"5.5\"</code> layer integer (-1, 0, 1, or 2) Defines how close the wisp orbits the player. Default is 1. A layer value of 2 will cause it to orbit at a further distance, while a value of 0 will cause it to orbit closer. A layer value of -1 will instead cause the wisp to not follow or orbit the player. If a layer attribute isn't present, it will default to 1. Entering any other positive value will cause the game to crash when the wisp attempts to be spawned. <code>layer=\"0\"</code> count integer Defines the number of wisps that should be spawned when the associated active item is used. Default is 1. <code>count=\"2\"</code> canShoot boolean Defines whether the wisp shoots tears or not. Default is <code>true</code>. <code>canShoot=\"false\"</code> fireDelay integer Defines the cooldown in game ticks (30 ticks per second) before wisp can fire again after shooting a tear. This system works in a similar way to the player's MaxFireDelay stat, which is explained further in this article. Default is 30. Wisps with a <code>fireDelay</code> value less than 0 effectively act the same as ones with <code>canShoot=\"false\"</code>. <code>fireDelay=\"45\"</code> (The wisp will shoot 1.5x slower compared to a default wisp.) shotSpeed float Defines the shot speed of the wisp's tears. The stat works similarly to the player's shot speed stat. Default is 1. <code>shotSpeed=\"0.75\"</code> tearFlags integer Defines what tear effect(s) the wisp's tears will have. A full list of what number corresponds to what tear effect can be referenced off of the <code>TearFlags</code> page on the docs. Multiple numbers can be inputted in this field, with a space separating each effect. <code>tearFlags=\"2 34\"</code> (This wisp will shoot homing, shielded tears.) tearScale float Controls the size of the wisp's tears. Default is 0.7. <code>tearScale=\"1.2\"</code> tearVariant integer Defines the appearance and behavior of the wisp's tears. A full list of what number corresponds to what tear variant can be referenced off of the <code>TearVariant</code> page on the docs. <code>tearVariant=\"28\"</code> (The wisp's tears will look like razors.) tearFlags2 integer Operates identically to the <code>tearFlags</code> attribute, but the defined tear effect will only have a chance to be shot by the wisp, controlled by the <code>procChance</code> attribute. <code>tearFlags2=\"4 22\"</code> (This wisp will have a chance to shoot tears that apply poison and burn.) procChance float Controls the chance for tear effects defined by the <code>tearFlags2</code> attribute to be fired. <code>procChance=\"0.25\"</code> (The wisp will have a 25% chance to shoot a tear with <code>tearFlags2</code>'s effects.) tearColor2 string Operates identically to the <code>tearColor</code> attribute, but only affects tears with the effects of the <code>tearFlags2</code> attribute. Uses the name of a color tag defined earlier in the file. <code>tearColor2=\"tear_green\"</code> tearScale2 float Operates identically to the <code>tearScale</code> attribute, but only affects tears with the effects of the <code>tearFlags2</code> attribute. <code>tearScale2=\"0.5\"</code> damageMultiplier2 float Multiplies the damage that a tear with the tear effects defined by the <code>tearFlags2</code> attribute will deal. <code>damageMultiplier2=\"1.5\"</code> (The wisp's tears with <code>tearFlags2</code>'s effects will also deal 1.5x damage.) priority integer Controls the wisp's priority value. When wisps with the same layer are spawned by Book of Virtues while that layer has reached its cap of wisps, the newly spawned wisp will replace the oldest wisp. The priority attribute overrides this behavior, so that wisps with a priority of -1 are prioritized to be replaced instead, and wisps with a priority of 1 or more are replaced only after no wisps with a lower priority value can be replaced. Default is 0. <code>priority=\"10\"</code>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/creating_item_wisps/#advanced-wisp-effects","title":"Advanced wisp effects","text":"<p>While <code>wisps.xml</code> provides lots of customization, not everything can be made possible with the file, such as wisps that have an effect when they disappear, or ones with special movement behavior. For effects like these, Lua code will be required to create these wisps. This section will cover some methods that can be used as a jumping off point for creating wisps with more complex effects.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/creating_item_wisps/#the-basics","title":"The basics","text":"<p>Wisps are defined as familiar entities in the game's code, so any callbacks in the modding API that affect familiars will be useful for running code on wisps. Additionally, the wisp of a given item has its <code>Subtype</code> value equal to the associated item's <code>CollectibleType</code>.</p> <p>This example code snippet below will add behavior to a custom item's wisp, causing it to spawn a puddle of water every 3 seconds (assuming our custom item is called Isaac's Blueprint):</p> <pre><code>local mod = RegisterMod(\"WispExampleTutorial\", 1)\nlocal ISAACS_BLUEPRINT = Isaac.GetItemIdByName(\"Isaac's Blueprint\")\n\nfunction mod:IsaacsBlueprintWispFamiliarUpdate(familiar)\n    -- Early return out of the function if the wisp is not from our item.\n    if familiar.SubType ~= ISAACS_BLUEPRINT then return end\n\n    -- This code will activate every 3 seconds the wisp has existed.\n    if familiar.FrameCount % 90 == 0 then\n        Isaac.Spawn(EntityType.ENTITY_EFFECT, EffectVariant.PLAYER_CREEP_HOLYWATER_TRAIL, 0, familiar.Position, Vector.Zero, nil)\n    end\nend\nmod:AddCallback(ModCallbacks.MC_FAMILIAR_UPDATE, mod.IsaacsBlueprintWispFamiliarUpdate, FamiliarVariant.WISP) -- Note the 3rd parameter here, which causes the function to only affect wisp familiars.\n</code></pre> <p>Another common effect design for wisps is to have an effect activate when it dies. Here's an extension of the code snippet to give the wisp a death effect:</p> <pre><code>local mod = RegisterMod(\"WispExampleTutorial\", 1)\nlocal ISAACS_BLUEPRINT = Isaac.GetItemIdByName(\"Isaac's Blueprint\")\n\nfunction mod:IsaacsBlueprintWispFamiliarUpdate(familiar)\n    -- Early return out of the function if the wisp is not from our item.\n    if familiar.SubType ~= ISAACS_BLUEPRINT then return end\n\n    -- This code will activate every 3 seconds the wisp has existed.\n    if familiar.FrameCount % 90 == 0 then\n        Isaac.Spawn(EntityType.ENTITY_EFFECT, EffectVariant.PLAYER_CREEP_HOLYWATER_TRAIL, 0, familiar.Position, Vector.Zero, nil)\n    end\n\n    -- This code will activate when the wisp has died.\n    if familiar:HasMortalDamage() then\n        Isaac.Spawn(EntityType.ENTITY_PICKUP, PickupVariant.PICKUP_HEART, HeartSubType.HEART_HALF_SOUL, familiar.Position, Vector.Zero, nil)\n    end\nend\nmod:AddCallback(ModCallbacks.MC_FAMILIAR_UPDATE, mod.IsaacsBlueprintWispFamiliarUpdate, FamiliarVariant.WISP)\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/creating_item_wisps/#custom-spawning-behavior","title":"Custom spawning behavior","text":"<p>Wisps can have their <code>count</code> defined as 0 if they have special behavior with how they are spawned, like an item spawning a random amount of them on use (ex. Guppy's Head). This behavior can be emulated in Lua via a callback registered when an item is used, checking if the player has the Book of Virtues item, and adding the wisp using either <code>player:AddWisp()</code> or <code>Isaac.Spawn()</code>.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/creating_item_wisps/#custom-movement","title":"Custom movement","text":"<p>A layer of -1 allows for custom movement behavior for wisps. Changing the wisp's <code>Position</code> and/or <code>Velocity</code> in a <code>MC_FAMILIAR_UPDATE</code> callback can be used to code your own movement behavior for the wisp.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","XML","Lua"]},{"location":"tutorials/basics/stats_cache/","title":"Stats cache","text":"<p>Many stats in Isaac are handled using a cache system. Knowing how it works at a basic level is essential when implementing custom stat modifiers.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/stats_cache/#introduction-to-stat-cache","title":"Introduction to stat cache","text":"<p>When loading into a run, the game calculates the value of each player stat by evaluating every possible modifier (such as passive items, character's starting stats or pill effects), then saves the results in a cache. From then on, the game reuses those cached values whenever possible to avoid additional computation.</p> <p>When the game detects that a specific stat might've gotten changed (e.g. picking up Sad Onion might change tears stat), it reruns the full calculation for this stat, and updates the cache with the new value.</p> \"Cache\" Definition <p>A cache in computer science is a temporary storage of data that is intended to be used later to avoid recomputing things that are costly to calculate. This can be something like a complicated math equation that takes a lot of time to complete. In our case, it's to avoid having to check and recalculate every stat given by items that the player has in their inventory.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/stats_cache/#adding-custom-stat-modifiers","title":"Adding custom stat modifiers","text":"<p>The <code>MC_EVALUATE_CACHE</code> callback runs right after a stat evaluation happens, providing the relevant player and a <code>CacheFlag</code> variable indicating which stat has updated. Modders can use this to calculate their own stat modifiers after the vanilla ones.</p> <p>Since previously applied stat changes are reset at the start of each stat evaluation, you should reapply them again each time.</p> <p>It's important to ensure that a stat is updated only if the <code>CacheFlag</code> provided matches the stat in question. Otherwise, it might end up being unintentionally duplicated.</p> <p><code>MC_EVALUATE_CACHE</code> supports an optional parameter for the <code>CacheFlag</code>, meaning that passing a value from the <code>CacheFlag</code> enum as the third argument to <code>AddCallback</code> will automatically make the provided function only run for the given cache flag. An alternative to this is to check if the provided <code>CacheFlag</code> value is equal to the <code>CacheFlag</code> of the stat that's meant to be changed.</p> CacheFlag comparison <p>In some mods' code, you might run across <code>CacheFlag</code> checks that use a bitwise <code>&amp;</code> operator. They look something like this:</p> <p><code>if cacheFlags &amp; CacheFlag.CACHE_SPEED == CacheFlag.CACHE_SPEED then</code></p> <p>This is because cache flags are a bit field in order to allow storing multiple cache flags in one variable. Using bitwise operations on them checks if a given bit is contained in the bit field, rather than checking if only the given bit is enabled. This allows the condition to pass even if other cache flags were also enabled in the bit field.</p> <p>However, the game always invokes the <code>MC_EVALUATE_CACHE</code> callback for each flag individually, even if they're evaluated at the same time, which makes direct comparison also work perfectly fine in context of this particular callback.</p> <p>The following if-statements are both equally valid ways of checking if the provided <code>CacheFlag</code> variable is for <code>CACHE_SPEED</code>.</p> <pre><code>if cacheFlags &amp; CacheFlag.CACHE_SPEED == CacheFlag.CACHE_SPEED then\n\nif cacheFlags == CacheFlag.CACHE_SPEED then\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/stats_cache/#triggering-cache-evaluation","title":"Triggering cache evaluation","text":"<p>When defining an item in your items.xml file, one of the properties that can be set is the item's <code>cache</code> value. This property tells the game which caches to re-evaluate, with different cache names separated by a space.</p> <p>Caches will be re-evaluated whenever an item is obtained or lost (passive items, or active items with <code>passivecache</code> set to <code>true</code>), or when the item is used (active items).</p> <p>Attaching a simple stat modifier to a passive item only requires setting the correct caches in items.xml and a Lua function that actually applies the modifiers.</p> <p>However, this isn't enough for every situation. Imagine an item working similarly to \"Money = Power\", which applies a stat modifier dependent on external conditions (the amount of coins the player has). This would require re-evaluating stats not only when the item is picked up, but also whenever the coin count changes.</p> <p>For such situations, the API allows triggering stat evaluations at any moment using the AddCacheFlags and EvaluateItems functions of EntityPlayer. The former specifies stats to be recalculated during the next evaluation, while the latter actually triggers said evaluation.</p>  Repentogon AddCacheFlags QoL <p>Repentogon adds an optional argument to AddCacheFlags which will automatically trigger <code>EvaluateItems</code> for you.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/stats_cache/#applying-stat-modifiers-outside-of-the-mc_evaluate_cache-callback","title":"Applying stat modifiers outside of the <code>MC_EVALUATE_CACHE</code> callback","text":"<p>As mentioned before, stats are reset completely when evaluated. This means that stat changes done outside of the <code>MC_CACHE_EVALUATE</code> callback may be overwritten at any time. Any conditional stat change should be done by storing the state of that change (e.g. using <code>CollectibleEffects</code> or <code>GetData</code>) and then triggering a stat evaluation to apply it, with the stat modification itself being hooked into an <code>MC_EVALUATE_CACHE</code> callback.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/stats_cache/#advanced-stat-calculations","title":"Advanced stat calculations","text":"<p>Both Tears and Damage use a more elaborate, multi-step formula to calculate their values.</p> <p>It might be desirable to make modded stat-ups be affected by those formulas (such as the 5.00 soft Tears cap), or to apply them before specific vanilla multipliers (such as the \"Soy Milk\" downwards damage multiplier).</p> <p>Unfortunately, the API only allows interaction with stats after all vanilla calculations have been applied. This makes full consistency with vanilla impossible without completely recreating the stat system.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/stats_cache/#example-code","title":"Example code","text":"<p>The following examples showcase how to work with stat caches in practice. The mod adds a custom passive item, which gives +1 Luck for each bone heart owned, at the cost of losing a bit of speed.</p> <p><code>items.xml</code>: <pre><code>&lt;items gfxroot=\"gfx/items/\" deathanm2=\"gfx/death_items.anm2\" version=\"1\"&gt;\n    &lt;passive id=\"1\" name=\"Bone Charm\" description=\"Skeletal Vigor\" gfx=\"placeholder.png\" quality=\"0\" tags=\"summonable nolostbr\"\n        cache=\"speed luck\" \n    /&gt; &lt;!-- Specifying stats we want updated on item pickup or drop. --&gt;\n&lt;/items&gt;\n</code></pre></p> <p><code>main.lua</code>: <pre><code>--Create a mod table and get the auto-generated ID of the custom item.\nlocal mod = RegisterMod(\"StatCacheExample\", 1)\nlocal BONE_CHARM_ID = Isaac.GetItemIdByName(\"Bone Charm\")\n\n--Putting numbers like these into variables is technically not mandatory,\n--but for more complex files it can help with reading and modifying code.\nlocal BONE_CHARM_SPEED_PENALTY = 0.10\nlocal BONE_CHARM_LUCK_PER_BONE_HEART = 1.0\n\n--Function where stat changes are applied.\n---@param player EntityPlayer\n---@param cacheFlag CacheFlag\nfunction mod:BoneCharmEvaluateCache(player, cacheFlag)\n    local itemCount = player:GetCollectibleNum(BONE_CHARM_ID)\n    --Since we only want to change stats of players with the item,\n    --return from the function early if they don't have it.\n    if itemCount == 0 then\n        return\n    end\n\n    --Ensuring cacheFlag matches the correct CacheFlag before updating a stat.\n    if cacheFlag == CacheFlag.CACHE_SPEED then\n        local speedToRemove = BONE_CHARM_SPEED_PENALTY * itemCount\n        player.MoveSpeed = player.MoveSpeed - speedToRemove\n    elseif cacheFlag == CacheFlag.CACHE_LUCK then\n        local luckToAdd = BONE_CHARM_LUCK_PER_BONE_HEART * player:GetBoneHearts() * itemCount\n        player.Luck = player.Luck + luckToAdd\n    end\nend\n\n--Attaching the function to a callback.\nmod:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, mod.BoneCharmEvaluateCache)\n\n--The only consistent way to detect heart count changes in base API is checking them every single frame,\n--due to there not being callbacks for heart count changes.\n---@param player EntityPlayer\nfunction mod:PostPeffectUpdate(player)\n    --Once again, we don't want to run this code without the item owned.\n    if not player:HasCollectible(BONE_CHARM_ID) then\n        return\n    end\n\n    --We'll be using GetData for storing previous bone heart count due to its simplicity.\n    local playerData = player:GetData()\n    local currentBoneHearts = player:GetBoneHearts()\n\n    --We compare current bone heart count of the player with one from previous frame.\n    --If they are different, trigger cache evaluation, so the luck is updated to match new value.\n    --Then save current value for use on the next update.\n\n    --Do note that playerData.BoneCharmPreviousBoneHearts will be nil here at some point due to not being initialised before.\n    --In this situation, it won't cause issues because of ~= (not equal to operator) working fine with nil.\n    --However, it's a good idea to check if the value isn't nil when performing other operations.\n    if playerData.BoneCharmPreviousBoneHearts ~= currentBoneHearts then\n        --Only luck scales with bone heart count, so we can skip refreshing speed here.\n        player:AddCacheFlags(CacheFlag.CACHE_LUCK)\n        player:EvaluateItems()\n    end\n    playerData.BoneCharmPreviousBoneHearts = currentBoneHearts\nend\n\n--Attaching the function to a callback.\nmod:AddCallback(ModCallbacks.MC_POST_PEFFECT_UPDATE, mod.PostPeffectUpdate)\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/tears_up/","title":"Tears up","text":"<p>Creating an item that gives a simple tears up or down is more complex than it may appear.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/tears_up/#explanation","title":"Explanation","text":"<p>Making a simple item like Sad Onion is actually a bit complicated, because the tears stat as displayed in the FoundHud in Repentance(+) is not the same as what we change internally.</p> <p>The game uses something called MaxFireDelay, or tear delay, which is the minimum amount of game updates (30 game updates per second) before another tear can be fired. You can find more information about it here, on the wiki.</p> <p>The in-game display of the tears stat is your tears per second, or your fire rate. To get the tears per second from the MaxFireDelay, use the following: <pre><code>local function toTearsPerSecond(maxFireDelay)\n  return 30 / (maxFireDelay + 1)\nend\n</code></pre></p> <p>Conversely, you can get the MaxFireDelay from the tears per second using the following: <pre><code>local function toMaxFireDelay(tearsPerSecond)\n  return (30 / tearsPerSecond) - 1\nend\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/tears_up/#example","title":"Example","text":"<p>Now we can put it all together. The following is technically a \"fire rate\" up, since a \"tears up\" follows the soft cap of 5 (depending on the character you're playing). <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal HAPPY_ONION = Isaac.GetItemIdByName(\"Happy Onion\")\nlocal HAPPY_ONION_TEARS = 1.1\n\nlocal function toTearsPerSecond(maxFireDelay)\n  return 30 / (maxFireDelay + 1)\nend\n\nlocal function toMaxFireDelay(tearsPerSecond)\n  return (30 / tearsPerSecond) - 1\nend\n\nfunction mod:SadOnionStats(player, cacheFlag)\n  local count = player:GetCollectibleNum(HAPPY_ONION)\n  local tearsPerSecond = toTearsPerSecond(player.MaxFireDelay)\n  tearsPerSecond = tearsPerSecond + (count * HAPPY_ONION_TEARS)\n  player.MaxFireDelay = toMaxFireDelay(tearsPerSecond)\nend\n\nmod:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, mod.SadOnionStats, CacheFlag.CACHE_FIREDELAY)\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/trigger_on_item_pickup/","title":"Trigger on item pickup","text":"<p>Having something happen when you finish picking up a collectible is a common yet unsupported feature in the Isaac modding API.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/trigger_on_item_pickup/#introduction","title":"Introduction","text":"<p>Many items have some kind of effect upon picking it up from a pedestal for the first time. These items will typically either grant health, coins, keys, or bombs directly, or spawn a pickup on the ground next to Isaac. Some of this may be achieved through variables in the <code>items.xml</code>, but others require Lua code. The vanilla Isaac modding API has no support for naturally triggering an effect upon the first pickup of a collectible from an item pedestal, but this tutorial will help cover a workaround to get as close to vanilla behavior as possible.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/trigger_on_item_pickup/#granting-health-or-pickups-through-xml","title":"Granting health or pickups through XML","text":"<p>If you're not looking to add any complex effect to your item on first pickup, you can make your item grant health or pickups through XML. Below is an example of a passive item that grants 5 bombs. You can find a list of attributes you can add here.</p> <pre><code>&lt;passive id=\"0\" name=\"My Item\" description=\"5 free bombs!\" gfx=\"collectible_my_item.png\" quality=\"0\" bombs=\"5\" /&gt;\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/trigger_on_item_pickup/#detecting-item-pickup-with-lua","title":"Detecting item pickup with Lua","text":"","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/trigger_on_item_pickup/#without-repentogon","title":"Without REPENTOGON","text":"<p>The main goal of this tutorial is to assist with non-REPENTOGON users, given the lack of convenient tools to work with. Thankfully, there is a variable that can be accessed on players to see what item they're holding before it's put into their inventory. This variable is called <code>QueuedItem</code>, which gives access to a <code>QueuedItemData</code> object. Utilizing this variable, we can know when we've picked up a specific item, and when the animation has finished so that we can trigger our desired effect.</p> <p>Firstly, you'll need your item's ID:</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal MY_ITEM = Isaac.GetItemIdByName(\"My Item\")\nlocal game = Game()\n</code></pre> <p>Next, create the function you'll be nesting your code in and the callback to run it on. We'll be using <code>MC_POST_PEFFECT_UPDATE</code>, which is an \"update callback\" that runs for every player. All entities have a callback that runs every time the entity is updated, which is 30 times every second. It is recommended to use this over <code>MC_POST_PLAYER_UPDATE</code> for most situations, as <code>MC_POST_PLAYER_UPDATE</code> runs 60 times per second.</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal MY_ITEM = Isaac.GetItemIdByName(\"My Item\")\nlocal game = Game()\n\nfunction mod:OnPeffectUpdate(player)\n    --We'll put our code in here\nend\n\nmod:AddCallback(ModCallbacks.MC_POST_PEFFECT_UPDATE, mod.OnPeffectUpdate)\n</code></pre> <p>Now we'll use <code>QueuedItem</code> to read what item the player is holding above their head, and if they're holding any item at all. <code>QueuedItem</code> has three variables: <code>Charge</code>, <code>Item</code>, and <code>Touched</code>.</p> <ul> <li><code>Charge</code> is only relevant to active items. It gives you the current charge of the active item.</li> <li><code>Item</code> is the ItemConfigItem object that stores every piece of information on an item you could ask for, and as such is important for identifying what item it is. <code>QueuedItem</code> will always be available, but <code>Item</code> can return <code>nil</code> if Isaac is not holding any items above his head. Remember that this can also have information on trinkets, not just collectibles.</li> <li><code>Touched</code> is the key to accomplishing the goal of this tutorial, indicating if this particular copy of the item has been picked up before or not. It will return <code>false</code> if not, and <code>true</code> otherwise.</li> </ul> <p>Additionally, we will make use of <code>GetData()</code>. This is a function available for every entity in the game which returns a table that's unique to that entity that can be used to store arbitrary data. It's recommended to read the article on Entity Data for detailed information about its many drawbacks.</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal MY_ITEM = Isaac.GetItemIdByName(\"My Item\")\nlocal game = Game()\n\nfunction mod:OnPeffectUpdate(player)\n    local data = player:GetData()\n    --We store the variable here for ease of access; don't have to type it out every time you need it\n    local heldItem = player.QueuedItem.Item\n\n    --An \"if variable\" check will check if the variable exists (not `nil`) or is equal to `true`. This check will pass if Isaac is holding an item!\n    if heldItem\n        --Check that the ID of the item matches your item's ID!\n        and heldItem.ID == MY_ITEM\n        --Important to check that it's a collectible, not a trinket! There's also :IsTrinket() if you wish to check the inverse.\n        and heldItem:IsCollectible()\n        and not heldItem.Touched\n        -- Store that this was our item so that we can run the rest of code only if it is\n        and not data.QueueMyItemPickup\n    then\n        data.QueueMyItemPickup = true\n    --Check that we're no longer holding an item and for if the item was our item.\n    elseif not heldItem and data.QueueMyItemPickup then\n        --Execute code here\n\n        --Set it to `nil` or `false` so that this code doesn't trigger again right away.\n        data.QueueMyItemPickup = nil\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_POST_PEFFECT_UPDATE, mod.OnPeffectUpdate)\n</code></pre> <p>Finally, we will spawn a random heart on first-time pickup.</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal MY_ITEM = Isaac.GetItemIdByName(\"My Item\")\nlocal game = Game()\n\nfunction mod:OnPeffectUpdate(player)\n    local data = player:GetData()\n    local heldItem = player.QueuedItem.Item\n\n    if heldItem\n        and heldItem.ID == MY_ITEM\n        and heldItem:IsCollectible()\n        and not data.QueueMyItemPickup\n    then\n        data.QueueMyItemPickup = true\n    elseif not heldItem and data.QueueMyItemPickup then\n        --Double-check the item actually made it into Isaac's inventory!\n        if player:HasCollectible(MY_ITEM) then\n            --Will find a free spot to spawn a pickup at least one tile away from Isaac. 40 = 1 tile.\n            local pos = game:GetRoom():FindFreePickupSpawnPosition(player.Position, 40)\n            --As we will be spawning pickups with Game():Spawn, it requires a seed to determine any RNG factors involved.\n            --We can use GetCollectibleRNG as an easy way to get an RNG object to provide a seed for us that's specific to a collectible!\n            local rng = player:GetCollectibleRNG(MY_ITEM)\n            --Game():Spawn(Entity type, Entity variant, position, velocity, Entity who spawned it, Entity subtype, RNG seed)\n            --The entity's SubType here is 0 to allow the game to determine what kind of heart pickup is spawned. Handy for hearts, keys, coins, bombs, trinkets, and collectibles.\n            --rng:Next() will \"advance\" (change) the seed of the RNG object, returning that new seed\n            game:Spawn(EntityType.ENTITY_PICKUP, PickupVariant.PICKUP_HEART, pos, Vector.Zero, player, 0, rng:Next())\n        end\n\n        data.QueueMyItemPickup = nil\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_POST_PEFFECT_UPDATE, mod.OnPeffectUpdate)\n</code></pre> Note <p>This method will only cover if Isaac has an item queued to be put into his inventory, such as collecting them from pedestals, and not from any methods that involve directly adding the item into Isaac's inventory such as the debug console.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/basics/trigger_on_item_pickup/#using-repentogon","title":"Using REPENTOGON","text":"<p>REPENTOGON adds a new callback named <code>MC_POST_ADD_COLLECTIBLE</code>. It will trigger whenever an item is added to Isaac's inventory through any means, with a parameter to see if it's a first-time pickup or not. This is the perfect callback for the purposes of this tutorial and simplifies our code tremendously.</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal MY_ITEM = Isaac.GetItemIdByName(\"My Item\")\n\n--The variable we're looking to use is \"firstTime\", which tells us if it's a first-time pickup or not.\nfunction mod:OnPostAddCollectible(itemID, charge, firstTime, activeSlot, varData, player)\n    if firstTime then\n        --Execute code here\n    end\nend\n\n--The addition of the \"MY_ITEM\" argument for this callback means it will only ever trigger for your item.\n--REPENTOGON only!\nmod:AddCallback(ModCallbacks.MC_POST_ADD_COLLECTIBLE, mod.OnPostAddCollectible, MY_ITEM)\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/","title":"Additional lua files","text":"<p>Expanding the scope of your mod's code through the usage of additional lua files is excellent for organization and utilizing libraries.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/#explanation","title":"Explanation","text":"<p>The <code>main.lua</code> file is all a mod needs to run Lua code, but sometimes the scope of your mod can become large enough that it becomes unsustainable to navigate all of the code within a single file. This is where the require function and its Isaac-specific relative, <code>include</code>, comes in. These functions allow you to load other lua files located within your mod folder and its subdirectories, allowing you to separate sections of code across multiple files. Libraries made for Isaac also utilize this function to allow you to insert many new functionalities into your mod with ease by simply dropping the file inside your mod and calling the <code>require</code> or <code>include</code> function on it.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/#require-and-include","title":"<code>require</code> and <code>include</code>","text":"<p>When loading lua files, you may choose to use <code>require</code> or <code>include</code>. Both accomplish the same goal, but have their own benefits and drawbacks.</p> <ul> <li><code>require</code> will load the Lua file and cache it, meaning it will remember that the file was loaded and will not load it a second time on subsequent calls. This means that you can call <code>require</code> as many times as you'd like within any file, and the code within will only be loaded once. This is useful for when you want to share certain variables across your mod that shouldn't be reset every time the file is required, or when your code should only run once but needs to be accessed in multiple places. The downside is that when you attempt to make changes to the file while the game is already open and execute the <code>luamod</code> command to reload your mod's lua code, it will not reload your lua file's contents, meaning you'll have to restart the game for your changes to come into effect. In addition, if another mod attempts to load the same exact file with the same filepath, it will use the already loaded file instead. It is recommended to nest all your files under a uniquely named directory specific to your mod.</li> <li><code>include</code> will load the Lua file and not cache it, meaning it can be loaded multiple times. The benefits are in opposition to <code>require</code>, where using the <code>luamod</code> command will reload your mod's code, allowing for quicker testing and tweaking of your code. The downside is that using <code>include</code> more than once on the same file will cause it to load a second instance of that file, meaning the code inside will be ran again. If the file structure of your mod is simple, this can be a non-issue for many developers, and is the preferred method of loading Lua files.</li> </ul>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/#loading-another-lua-file","title":"Loading another lua file","text":"<p>Using the <code>require</code> or <code>include</code> function to load a lua file is relatively simple. Just call either function and insert the filepath to your lua file as a string as the only argument. No matter where you call the function, all filepaths start from the root of the mod directory, which is the same location as your <code>main.lua</code> file. When dealing with folders, you can separate the folders within the path with a period (<code>.</code>). If using <code>include</code>, you can also choose to use <code>/</code> instead. Adding the <code>.lua</code> file extension at the end of the filepath is not required.</p> <p>This is an example of all the ways to load a file located in a \"scripts\" folder named <code>my_file.lua</code> (Don't actually load files multiple times like this).</p> <pre><code>require(\"scripts.my_file\")\ninclude(\"scripts.my_file\")\ninclude(\"scripts/my_file\")\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/#accessing-contents-from-loaded-files","title":"Accessing contents from loaded files","text":"<p>Assuming the file loaded successfully with no errors, and that the file has a <code>return</code> statement at the end of it that returns a value, the <code>require</code>/<code>include</code> functions will return that value.</p> <p><code>scripts/the_number_one.lua</code></p> <pre><code>return 1\n</code></pre> <p><code>main.lua</code></p> <pre><code>local number = include(\"scripts/the_number_one\")\nprint(number) --This will print \"1\"\n</code></pre> <p>If an error occurs while your file is being loaded, the function will return the error message you see in the debug console.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/#workarounds-for-require-and-includes-restrictions","title":"Workarounds for require and include's restrictions","text":"<p>There are ways to get around the downsides that come with choosing to use either <code>require</code> or <code>include</code> for loading your lua files.</p> <p>The method for <code>require</code> is a bit too advanced to cover for this tutorial, but you can execute what's known as the \"require hack\". When your <code>main.lua</code> file is loaded again after using the <code>luamod</code> command, you can remove all of your cached files from an external file list, allowing <code>require</code> to load them again. It is explained in greater detail here.</p> Warning <p>The require hack requires the usage of the <code>-luadebug</code> launch parameter, which can potentially be harmful if used by bad actors. This post by mod developer JSG goes into detail on why: </p> <p>For <code>include</code>, you can load the file contents onto a global variable, or onto a local variable that can be passed along to other files by having the file encased in a function, which can then have required variables be passed as an argument</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/#include-global-example","title":"<code>include</code> global example","text":"<p>Putting returned values from different files into a global variable is convenient for when you need to access them often.</p> Warning <p>Global variables exist outside of local environment of your mod and as such can be accessed by other mods. You should typically avoid making global variables, but if you do, ensure it has a name unique to your mod so that there's a low chance of it being used by accident.</p> <p><code>scripts/the_number_nine.lua</code></p> <pre><code>return 9\n</code></pre> <p><code>main.lua</code></p> <pre><code>_G.MyVeryEpicAndUniqueGlobalName = {}\nlocal nine = include(\"scripts/the_number_nine\")\nMyVeryEpicAndUniqueGlobalName.NINE = nine\ninclude(\"scripts/nine_plus_ten\")\n</code></pre> <p><code>scripts/nine_plus_ten.lua</code> <pre><code>print(MyVeryEpicAndUniqueGlobalName.NINE + 10 + 2) --This will print 21\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/additional_lua_files/#include-function-example","title":"<code>include</code> function example","text":"<p>This method can be useful for when you don't need the returned code as a global.</p> <p><code>scripts/the_number_nine.lua</code></p> <pre><code>return 9\n</code></pre> <p><code>scripts/number_plus_twelve</code></p> <pre><code>return function(number)\n    return number + 12\nend\n</code></pre> <p><code>main.lua</code></p> <pre><code>local nine = include(\"scripts/the_number_nine\")\nlocal plusTwelve = include(\"scripts/number_plus_twelve\")\nprint(plusTwelve(nine)) --This will print 21\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/entity_data/","title":"Entity data","text":"<p>You may have read the guide on saving and storing data, which covers how to export data to a save file and have it persist between runs. This tutorial covers a similar concept that can be combined with the knowledge of saving data: creating data associated with objects.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/entity_data/#getdata-and-its-drawbacks","title":"<code>GetData</code> and its drawbacks","text":"<p>Isaac provides a simple way of storing data within entities: a method known as GetData. Utilizing <code>GetData</code> is quite simple, as it can be referenced from any kind of <code>Entity</code>. <code>GetData</code> simply returns a table which can be used to store any amount of arbitrary data and access it later.</p> <p>Although <code>GetData</code> is convenient, it has several drawbacks which should be taken into consideration by modders. The docs provide some reasoning for this, citing that the data table is shared, volatile, and will require its own saving and storing regardless of it being a feature of the API, but these can be upsides depending on the use case. Here are a few additional drawbacks:</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/entity_data/#performance-issues","title":"Performance issues","text":"<ul> <li><code>GetData</code> creates a small amount of overhead when called. Because it is calling the C++ side, it disrupts the flow of code. Storing the tables on the Lua side would allow for better flow and management of code. Additionally, this overhead can stack up if the method is called consistently. If you still wish to use <code>GetData</code>, avoid calling it multiple times within the same function, and structure your code to be able to pass it to lower level functions instead of calling the method again.</li> <li><code>GetData</code> does some amount of memory allocation on the C++ side, meaning its impact on performance can range depending on the speed and state of the user's memory.</li> </ul>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/entity_data/#unexpected-behavior","title":"Unexpected behavior","text":"<ul> <li><code>GetData</code> does not account for items such as Glowing Hourglass. It may be hard to store a backup of data, as it must either be done in a sub-table or already stored locally.</li> <li><code>GetData</code> is erased from an entity on <code>MC_POST_ENTITY_REMOVE</code>, which runs before <code>MC_POST_NPC_DEATH</code>. </li> </ul> <p>Depending on the use case, <code>GetData</code> may still fit the needs of the modder, providing the convenience of being able to store smaller and simpler data that doesn't necessarily need to be scalable or need a complicated system. In cases where data needs to be scalable or there are issues of performance, it may be worth writing a simple system to store data locally on the Lua side.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/entity_data/#entity-data-holders","title":"Entity data holders","text":"<p>Conversely, writing a entity data holder has many upsides:</p> <ul> <li>Because the system is in the user's control, the user can control when the data is cleared.</li> <li>It can handle specific and custom behavior, such as behavior for instantiation, or whenever the data is cleared.</li> <li>Any issues or edge cases can be handled by the system through custom behavior.</li> </ul> <p>While writing a entity data holder is fairly straightforward, there are still a few considerations:</p> <ul> <li>The user must find a way to store the data in relation to specific entities or objects. <code>GetPtrHash</code> is a good starting point, but has several issues: Because <code>GetPtrHash</code> returns a hash based on a pointer, when that memory is eventually cleared, the pointer will be reused. This means that if data is not cleared ahead of time, a new entity or object may reference the data of an old object by accident.</li> <li>The data must be cleared manually, otherwise it will continue to stack up and cause a memory leak. This is also important for avoiding the previous issue. </li> </ul> <p>In cases where writing a data holder might not be worth the time and effort or seems undesirable, it may be worth sticking to <code>GetData</code>.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/entity_data/#writing-a-data-holder","title":"Writing a data holder","text":"<p>To get started, simply create a new Lua file: <pre><code>local dataHolder = {}\n\n-- We will store the data within its own table in the data holder for easy access\ndataHolder.Data = {}\n\nfunction dataHolder:GetEntityData(entity)\n    -- We obtain the entity's pointer hash to easily reference it in a table\n    local ptrHash = GetPtrHash(entity)\n    -- Here we instantiate the data if it doesn't exist\n    if not dataHolder.Data[ptrHash] then\n        dataHolder.Data[ptrHash] = {}\n        local entityData = dataHolder.Data[ptrHash]\n\n        --[[\n            We provide a default value of the entity's pointer to the data.\n            The pointer helps us later be able to check if the entity exists\n\n            For looping purposes, it may be inconvenient to store it here.\n            If this is the case, making another table to store the pointer\n            may be preferable. \n        --]] \n        entityData.Pointer = EntityPtr(entity)\n\n        -- You may also add additional initialization steps here\n        -- This may include defining default variables for your data:\n\n        -- entityData.customValue = false\n    end\n\n    -- Finally, we return the data itself\n    return dataHolder.Data[ptrHash]\nend\n\nreturn dataHolder\n</code></pre></p> <p>As it is just a holder, you may <code>require</code> this Lua file so that the data is persistent across the project. Using <code>include</code> would make the data local to the file you are including it in. See the \"Additional lua files\" article for more information about the differences between the two.</p> <p>We use an EntityPtr object to keep track of the entity. Storing the entity directly can cause unexpected behavior, such as the variable pointing to a different entity when the initial one is removed. <code>EntityPtr</code> is much safer and also clears its <code>Ref</code> property automatically when the entity no longer exists. You can check for if <code>Ref</code> is <code>nil</code> to see if the entity still exists.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/entity_data/#clearing-data-in-your-holder","title":"Clearing data in your holder","text":"<p>Lastly, we will cover removing and clearing custom data. Additional callbacks should be registered to clear the information after specified events. Depending on the use case, this can range from clearing data when entities are removed directly in <code>MC_POST_ENTITY_REMOVE</code>, clearing data when the entity is fully dead in <code>MC_POST_NPC_DEATH</code>, or clearing entity data at the end of the room with <code>MC_POST_NEW_ROOM</code>.</p> <p>Below is an example of how to clear custom data on <code>MC_POST_NEW_ROOM</code>:</p> <pre><code>-- Provide your data holder to be able to clear it\nlocal dataHolder = require(\"path.to.data_holder\")\n\n-- For clearing custom data on MC_POST_NEW_ROOM\nfunction MOD_REFERENCE:ClearCustomData()\n    -- Loop through the table of stored data\n    for ptrHash, entityData in pairs(dataHolder.Data) do\n        -- Check if the entity's pointer exists\n        local entityPointer = entityData.Pointer\n\n        -- If the pointer doesn't exist, or the entity's reference doesn't exist\n        if not (entityPointer and entityPointer.Ref) then\n            -- We know the entity doesn't exist anymore, therefore remove its data\n            entityData.Data[ptrHash] = nil\n        end\n    end\nend\nMOD_REFERENCE:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, MOD_REFERENCE.ClearCustomData)\n</code></pre> <p>Similarly, the following code clears entity data on removal or death:</p> <pre><code>-- Provide your data holder to be able to clear it\nlocal dataHolder = require(\"path.to.data_holder\")\n\nfunction MOD_REFERENCE:ClearDataOnRemoveOrDeath(entity)\n    -- Get the pointer hash of the current entity\n    local ptrHash = GetPtrHash(entity)\n    -- Set the data to nil. This works even if it had no data prior\n    dataHolder.Data[ptrHash] = nil\nend\nMOD_REFERENCE:AddCallback(ModCallbacks.MC_POST_ENTITY_REMOVE, MOD_REFERENCE.ClearDataOnRemoveOrDeath)\n-- Alternatively clear it when the NPC_DEATH callback is run\n-- MOD_REFERENCE:AddCallback(ModCallbacks.MC_POST_NPC_DEATH, MOD_REFERENCE.ClearDataOnRemoveOrDeath)\n</code></pre>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/","title":"Saving data","text":"<p>Storing and loading data is surprisingly simple, but how you structure your mod's save data leaves a lot to consider.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#saving-and-loading","title":"Saving and loading","text":"<p>Let's start with the most basic concept, which is saving and loading.</p> <p>Save data for mods are stored in the <code>data</code> folder in your game's directory. This is so that mod save data is not deleted when your mod is uninstalled. The save data for your mod is located within a folder in <code>data</code> that is named after your mod's folder name.</p> <p></p> <p>Notice that there are 3 files in here. Each file in here corresponds to a save file in game. So <code>save1.dat</code> corresponds to the left-most save file, <code>save2.dat</code> is the middle save file, and <code>save3.dat</code> is the right-most one. Save data is stored in plain text, so you can open these up in a text editor if you'd like.</p> <p>Note that saving and loading data is relative to a save file. As you'll see later on, the methods that you use to save and load data can only be called within a run, and will save and load from the file corresponding to the save file you're playing on. This is for security reasons, as mods being able to create arbitrary files on the user's computer would be very dangerous.</p> <p>There are 4 functions that are a part of your Mod Reference that you need to know about:</p> <ol> <li><code>HasData()</code> - Returns a <code>boolean</code> that signifies if your mod has any save data.</li> <li><code>LoadData()</code> - Returns the <code>string</code> stored in the <code>saveX.dat</code> file.</li> <li><code>SaveData(string data)</code> - Saves an arbitrary <code>string</code> to the <code>saveX.dat</code> file. Keep in mind that the file this saves to is decided by the file the run is being played on.</li> <li><code>RemoveData()</code> - Deletes the <code>saveX.dat</code> file if it exists.</li> </ol> <p>The actual act of saving a string to a file is very straightforward.</p> <pre><code>local mod = RegisterMod(\"My mod\", 1)\n\nmod:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, function()\n    if mod:HasData() then\n        local loadedData = mod:LoadData()\n        print(loadedData) -- \"Test!\"\n    else\n        mod:SaveData(\"Test!\")\n    end\nend)\n</code></pre> <p>In the above example, we check to see if our mod has save data when a run is started. If they do, we load that save data (stored as a <code>string</code>) and print it to the debug console. Otherwise, we create new save data with the value <code>\"Test!\"</code>.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#structuring-save-data-with-json","title":"Structuring save data with JSON","text":"<p>We know how to save data, but how do we structure it? Isaac has a built-in JSON library that we can use to convert our Lua tables into JSON that we can save. We can store our mod's data in a table, then store it using the JSON library. There are caveats to this that will be covered later on, but observe the following example to see the most basic implementation of this:</p> <pre><code>local mod = RegisterMod(\"My mod\", 1)\nlocal json = require(\"json\") -- This requires the built-in JSON library.\n\nmod:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, function()\n    if mod:HasData() then\n        local loadedData = mod:LoadData()\n        local saveData = json.decode(loadedData)\n\n        print(saveData.Bar) -- Hello, world!\n    else\n        local dataToSave = {\n            Foo = 1,\n            Bar = \"Hello, world!\"\n        }\n        local encoded = json.encode(dataToSave)\n        mod:SaveData(encoded)\n    end\nend)\n</code></pre> <p>In the above example, we check to see if our mod has save data when a run has started. If they do, we deserialize the JSON string that is our save data. To \"deserialize\" is to convert data from a \"serialized\" format (such as a <code>string</code>) back into a data structure we can use (in this case, a table). <code>json.decode</code> takes a string and returns the decoded data, which in our case is a table with a few values in it.</p> <p>If we don't have save data for our mod, we'll create a table and serialize it. To serialize is to convert a data structure like our table here into a \"serialized\" format, such as a <code>string</code>. This table can have anything in it, but there are rules we must follow as to not break our save data.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#important-caveats-with-the-json-library","title":"Important caveats with the JSON library","text":"<p>There are many things to look out for when it comes to the built-in JSON library that Isaac provides. Below is a comprehensive list of all issues that you may run into with encoding and decoding data with the JSON library.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#sparse-arrays","title":"Sparse arrays","text":"<p>For starters, let's look at how it handles sparse arrays. A sparse array is an array (an ordered table where all the keys are integers, starting from 1) with gaps in it. The JSON encoder will fill in the gaps with <code>\"null\"</code> until there are no gaps left, even if this requires inserting millions of values. <pre><code>local normalArray = {\"Apple\", \"Orange\", \"Banana\", \"Pear\"}\n\nlocal alsoNormalArray = {\n    [1] = \"Apple\",\n    [2] = \"Orange\",\n    [3] = \"Banana\",\n    [4] = \"Pear\"\n}\n\n-- This will create 997 \"null\" entries in your array when saved to file.\n-- This can bloat file sizes, and is generally unexpected behavior!\nlocal sparseArray = {\n    [1] = \"Apple\",\n    [2] = \"Orange\",\n    [1000] = \"Banana\",\n    [1001] = \"Pear\"\n}\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#invalid-table-key-type","title":"Invalid table key type","text":"<p>Tables can only have either strings or integers as keys. You should not attempt to encode tables with functions, other tables, decimals (floats), or <code>userdata</code>s (Isaac objects such as <code>Vector</code>s) as keys to values. Additionally, the JSON encoder will attempt to convert any decimal (float) keys in a given table to strings, which will lead to unexpected behavior when trying to index the later decoded data with that same decimal. <pre><code>-- This won't work!\nlocal badData = {\n    [Vector(0, 1)] = \"Apple\"\n}\n\n-- No decimals!\n-- Typically decimals are fine, but they convert all number keys to strings in the table.\n-- So if you encode this table then decode it, indexing with the number 0.1 will return nil, while indexing with the string \"0.1\" will return \"Apple\".\n-- This is typically unexpected behavior.\nlocal alsoBadData = {\n    [0.1] = \"Apple\",\n    [1.1] = \"Orange\",\n}\n\n-- You get the idea!\nlocal superBadData = {\n    [badData] = \"Apple\",\n}\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#mixed-table-key-types","title":"Mixed table key types","text":"<p>Tables can only have either strings or integers as keys. Mixing the two would cause all integers to be converted to strings, which is unexpected as it's quite literally not what you saved. <pre><code>-- There's string and integer keys here!\nlocal badTable = {\n    Apple = \"Banana\",\n    [2] = \"Orange\"\n}\n\n-- Same as before, just a different way of doing it.\nlocal alsoBadTable = {\n    [\"Apple\"] = \"Banana\",\n    [2] = \"Orange\"\n}\n\n-- No decimals!\n-- Typically decimals are fine, but they convert all number keys to strings in the table.\n-- So if you encode this table then decode it, indexing with the number 0.1 will return nil, while indexing with the string \"0.1\" will return \"Apple\".\n-- This is typically unexpected behavior.\nlocal superBadTable = {\n    [1] = \"Apple\",\n    [1.1] = \"Banana\"\n}\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#invalid-numbers","title":"Invalid numbers","text":"<p>Infinite numbers or NaN numbers are unable to be read by the JSON decoder, causing data to become broken. <pre><code>local badTable = {\n    Apple = 1/0 -- inf\n    Banana = -1/0 -- -inf\n    Orange = 0/0 -- NaN\n}\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#improper-value-types","title":"Improper value types","text":"<p>Tables containing anything other than strings, numbers, booleans, or other tables cannot be encoded by the provided JSON library. <pre><code>local badTable = {\n    Apple = 1,\n    Banana = function() -- Prevents this table from being encoded.\n        return 2\n    end\n}\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#circular-references","title":"Circular references","text":"<p>Tables containing a reference to itself or a table higher up in its hierarchy will cause stack overflows. <pre><code>local badTable = {\n    Apple = badTable\n}\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/saving_data/#further-resources","title":"Further resources","text":"<ul> <li>IsaacSaveManager is a library that will handle the complicated aspect of saving data for you, as well as give numerous extra utilities for saving data pertaining to the room, run, and floor.</li> </ul>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/","title":"Vector math","text":"<p>Vector math is an important fundamental concept to understand, especially when working with entities within Isaac.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#what-is-a-vector","title":"What is a vector?","text":"<p>In algebra, a vector can be described as having both magnitude and direction. This means that a vector can describe size, extents, and direction in 2D space.</p> <p>In Isaac (and most 2D games), the origin point for coordinates is the at the top-left of the screen. This means that a positive X coordinate is pointing towards the right, a positive Y coordinate is pointing downwards, and vice versa.</p> <p></p> <p>In the above example, the blue arrow is pointing towards the right across 6 tiles. This would produce a vector of <code>(6, 0)</code>, which has a magnitude (or size) of 6.</p> <p>The red arrow is pointing downwards and towards the right across 4 tiles. This would produce a vector of <code>(4, 4)</code>, which represents both the direction and how far in that direction the vector is pointing.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#unit-vectors","title":"Unit vectors","text":"<p>A \"unit vector\" is a vector that is normalized, meaning it has a length of one. A unit vector is used for representing a direction with no size attached to it. You can find an interactive visualization for unit vectors on a unit circle (a circle with a radius of 1) by clicking here and scrolling down to the \"Try it Yourself\" section.</p> <p></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#what-are-vectors-used-for-in-isaac","title":"What are vectors used for in Isaac?","text":"<p>Vectors in Isaac are used to determine many things, such as scale, position, and velocity.</p> <ul> <li>Scale is multiplied by the base size of something in order to change how big it is. For example, a <code>Sprite</code> with a <code>Scale</code> of <code>Vector(1, 1)</code> is the same size as it is in the spritesheet. If you made that <code>Scale</code> equal to <code>Vector(2, 2)</code>, it would now be 2 times as big. If you made it equal to <code>Vector(2, 1)</code>, it would be 2 times as wide, but the same height as normal.</li> <li>Position is where something is located in 2D space. An <code>Entity</code> with <code>Position</code> set to <code>Vector(20, 20)</code> would be located 20 units to the right, and 20 units downwards from the origin point of the room, which is the top-left. In Isaac, 40 units is the length of a single tile.</li> <li>Velocity is how fast something is moving in a certain direction. An <code>Entity</code> with a <code>Velocity</code> of <code>Vector(0, -20)</code> would be moving upwards at a speed of 20 units.</li> </ul>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#coordinate-systems","title":"Coordinate systems","text":"<p>In Isaac, there are 3 different coordinate systems present, each with varying usages of a single unit.</p> <ul> <li>World space represents the coordinate system used for things within the game world, such as entities.</li> <li>Render space represents the coordinate system used for things within the rendering plane of the current room. This is independent of the window size.</li> <li>Screen space represents the coordinate system used to determine the position of something on the screen. This is based on the window size. If the game is running at a resolution of 1920x1080, then the bottom-right of the screen will be <code>Vector(1920, 1080)</code>.</li> </ul> <p>You can convert from World coordinates to Render or Screen coordinates using functions found in the <code>Isaac</code> class. <pre><code>local worldPosition = Vector(100, 100)\n\n-- To convert to screen space:\nlocal screenPosition = Isaac.WorldToScreen(worldPosition)\n\n-- To convert to render space:\nlocal renderPosition = Isaac.WorldToRenderPosition(worldPosition)\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#manipulating-vectors","title":"Manipulating vectors","text":"<p>Now that we know what vectors are and how the game handles them, we can now start to manipulate them. In Isaac, there is a <code>Vector</code> object which holds many useful functions for manipulating vectors.</p> <p>Let's start with basic arithmetic.</p> Arithmetic type Description Example Addition Adding together two vectors will combine their X and Y values. <code>Vector(2, 2)</code> + <code>Vector(1, 1)</code> = <code>Vector(3, 3)</code> Subtraction Subtracting a vector with another vector will subtract the vector on the left's X and Y values with the vector on the right's. <code>Vector(2, 2)</code> - <code>Vector(1, 1)</code> = <code>Vector(1, 1)</code> Multiplication You can multiply a vector with another vector to multiple their X and Y values together, but you can also multiple a vector with a number. This is useful for increasing or decreasing the magnitude of a vector, especially unit vectors. <code>Vector(1, 1)</code> \u00d7 <code>5</code> = <code>Vector(5, 5)</code> OR <code>Vector(1, 1)</code> \u00d7 <code>Vector(5, 1)</code> = <code>Vector(5, 1)</code> Division Like with multiplication, you can divide a vector with another vector, or you can divide a vector with a number. <code>Vector(4, 4)</code> \u00f7 <code>2</code> = <code>Vector(2, 2)</code> OR <code>Vector(4, 4)</code> \u00f7 <code>Vector(1, 2)</code> = <code>Vector(4, 2)</code> Inversion You can invert a vector by adding a dash (-) behind it. This means that you can flip the sign of the X and Y values of a number to be negative to positive, or positive to negative. <code>-Vector(2, -2)</code> = <code>Vector(-2, 2)</code> <p>Beyond basic arithmetic, sometimes it is necessary to want to resize or rotate vectors, among other common forms of vector manipulation. The modding API has many functions that you can use on <code>Vector</code> objects to avoid doing the math for this yourself. Below is a table going over all the basic vector manipulation functions.</p> Function Description Example <code>Distance</code> This can tell you the distance between two vectors that represent a position in 2D space in units. <code>Vector(2, 0):Distance(Vector(4, 0))</code> = <code>2</code> <code>DistanceSquared</code> The same as <code>Distance</code>, but returns the distance in squared units. This is function has slightly less overhead than <code>Distance</code>, as the game doesn't need to calculate the square root. <code>Vector(2, 0):DistanceSquared(Vector(4, 0))</code> <code>GetAngleDegrees</code> Returns a number representing the direction a vector is pointing in, in degrees. This is relative towards the right, meaning that right is an angle of 0, down is an angle of -90, up is an angle of 90, and left is an angle of 180 or -180. <code>Vector(5, 0):GetAngleDegrees)</code> = <code>0</code> <code>Normalized</code> Returns a vector normalized to be a unit vector, meaning it returns purely the direction the vector is pointing in and nothing else. <code>Vector(2, 2)</code> = <code>Vector(0.707, 0.707)</code> <code>Resized</code> Returns a vector normalized and then resized by a certain amount of units. This is useful over simply multiplying a vector, as it allows you to resize a vector of any length without needing to normalize it yourself first. <code>Vector(15, 0):Resized(3)</code> = <code>Vector(15, 0):Normalized() * 3</code> = <code>Vector(3, 0)</code> <code>Rotated</code> Returns a vector rotated by a certain amount of degrees. This will usually have some floating point imprecisions attached. This means that instead of exactly 0, you may receive a number like <code>-4.37114e-08</code>, which is <code>-0.0000000437114</code> in standard form. <code>Vector(1, 0):Rotated(90)</code> = <code>Vector(0, 1)</code> (excluding any floating point imprecisions) <p><code>Normalized</code>, <code>Rotated</code>, <code>Resized</code> all have counterparts without the \"d\" at the end which alter the original vector itself instead of returning the result. <pre><code>local vec = Vector(2, 0)\nvec:Rotate(90)\n\nprint(vec) -- Vector(0, 2)\n</code></pre></p> <p>Lastly, there's also a static function that's a part of the <code>Vector</code> class that lets you create a unit vector from a specific angle in degrees. The way you call this function works a little differently than normal. Observe the following example: <pre><code>local angle = 90\nlocal v1 = Vector.FromAngle(angle) -- Notice how we use a period (.) instead of a colon (:) here!\n\nprint(v1) -- Vector(0, 1)\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#advanced-vector-manipulation","title":"Advanced vector manipulation","text":"<p>While the most common forms of vector manipulation have already been covered, there are further forms of manipulation you can do with more advanced functions. Make sure you have a strong understanding of vectors before diving into these.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#linear-interpolation","title":"Linear interpolation","text":"<p>Linear interpolation, or lerp for short, is used to calculate an \"in-between\" point between two numbers. In our case, it lets us get a position between two vectors.</p> <p>Before talking about linear interpolation with vectors, first it's important to understand how it applies with basic numbers. Observe the following example: <pre><code>function lerp(a, b, percent)\n    return a * (1 - percent) + b * percent\nend\n\nlocal halfWay = lerp(0, 2, 0.5)\nprint(halfWay) -- 1\n</code></pre></p> <p>With the above code, we have used the linear interpolation formula calculated with the <code>lerp()</code> function. This formula takes the starting number <code>a</code>, the ending number <code>b</code>, and a target percentage between the two numbers. Remember that percentages are represented with a decimal multiplied by 100, so 0.5 is the same as 50%. 50% of the way from 0 to 2 is 1, and that's what we got from the function.</p> <p></p> <p>Linear interpolation is a very important concept to understand for lots of math in programming, but how do we apply it to vectors? The modding API provides a <code>Lerp()</code> function we can call on a vector. This changes the vector it's used on and does not provide a new, altered version of the vector. <pre><code>local v1 = Vector(0, 0)\nlocal v2 = Vector(1, 1)\nv1:Lerp(v2, 0.5) -- v1 equals Vector(0.5, 0.5) now\n</code></pre></p> <p>If you don't want to alter the vector you're calling this function on (<code>v1</code> in this example), you should use the <code>lerp</code> function provided earlier. <pre><code>function lerp(a, b, percent)\n    return a * (1 - percent) + b * percent\nend\n\nlocal v1 = Vector(0, 0)\nlocal v2 = Vector(1, 1)\n\nlocal v3 = lerp(v1, v2, 0.5) -- v3 equals Vector(0.5, 0.5), while v1 and v2 are still the same\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/concepts/vector_math/#dot-product","title":"Dot product","text":"<p>The dot product between two vectors can be explained as the amount that the first vector is pointing in the same direction as the second vector. This is represented as a number between -1 and 1, with -1 meaning they're facing completely opposite directions, and 1 meaning they're facing the same direction. <pre><code>local v1 = Vector(1, 0)\nlocal v2 = Vector(0, 1)\n\nlocal dotProduct = v1:Dot(v2)\nprint(dotProduct) -- This returns\n</code></pre></p> <p></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","Lua"]},{"location":"tutorials/crash_course/active_item/","title":"Active items","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Active items are items held in the active slot and usually require charge to be used. This tutorial will branch off of the passive items page, so be sure to read that first.</p>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/active_item/#video-tutorial","title":"Video tutorial","text":"<p>(This tutorial covers both Item Pools and Active Items) </p>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/active_item/#creating-your-active-item","title":"Creating your active item","text":"<p>The process of creating an active item is identical to that of a passive item, replacing the <code>passive</code> tag with <code>active</code>. However, there are a few unique attributes exclusive to active items.</p> <pre><code>&lt;items gfxroot=\"gfx/items/\" version=\"1\"&gt;\n    &lt;active id=\"1\" name=\"Big Red Button\" gfx=\"big_red_button_item.png\" description=\"It's a big red button\" quality=\"4\" maxcharges=\"6\" chargetype=\"normal\"/&gt;\n&lt;/items&gt;\n</code></pre> <code>active</code>-exclusive tag variables Note <p>All tags are optional.</p> Variable Name Possible Values Description maxcharges int <code>0</code> by default. When chargetype is set to <code>timed</code>, this attribute is used to define the cooldown of the item in game ticks. 30 = 1 second. chargetype string <code>normal</code> by default. Possible values: [<code>normal</code>, <code>timed</code>, <code>special</code>]. passivecache bool <code>false</code> by default. Calls a cache evaluation when picked up similar to passive items, as typically the <code>cache</code> flag for active items will only trigger upon item activation.","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/active_item/#explaining-charge-types","title":"Explaining charge types","text":"<p>There are three charge types an active item can have that affect its charging behavior.</p> <ul> <li><code>normal</code>: The standard, default method of charging. Charges through room clears, battery pickups, and other conventional methods. Vanilla only uses max charges of [<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>6</code>, <code>8</code>, <code>12</code>], but there is support for any number from 0 to 12.</li> <li><code>timed</code>: Can charge all the same ways <code>normal</code> charge type items do. Will automatically fill its chargebar over time.</li> <li><code>special</code>: Cannot be charged through any conventional means, and must be charged manually with Lua code.</li> </ul>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/active_item/#coding-the-active-item","title":"Coding the active item","text":"<p>The active item now exists, but does not do anything on its own upon activation. This will require Lua code in order to give it an effect when used. The crucial callback for active items is ModCallbacks.MC_USE_ITEM.</p> <p>Inside your <code>main.lua</code>, get your active item's ID and create a function attached to the <code>MC_USE_ITEM</code> callback. <pre><code>local mod = RegisterMod(\"My Mod\", 1)\n\nlocal bigRedButton = Isaac.GetItemIdByName(\"Big Red Button\")\n\nfunction mod:RedButtonUse(item)\n\nend\n\n--Will call the mod:RedButtonUse function upon activating our active item.\n--Our item's ID is inserted at the end of the AddCallback function, as this callback accepts an optional argument\n--to specify which active item should trigger our code.\nmod:AddCallback(ModCallbacks.MC_USE_ITEM, mod.RedButtonUse, bigRedButton)\n</code></pre></p> <p>For this example, this item will kill every enemy in the room upon use.</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\n\nlocal bigRedButton = Isaac.GetItemIdByName(\"Big Red Button\")\n\nfunction mod:RedButtonUse(item)\n    --Gets every entity in the room, as there are no specialized methods of getting only enemies.\n    local roomEntities = Isaac.GetRoomEntities()\n    --Loop through the list of entities.\n    for _, entity in ipairs(roomEntities) do\n        --Will check if it is an enemy and is susceptible to damage.\n        if entity:IsActiveEnemy() and entity:IsVulnerableEnemy() then\n            --Kill it.\n            entity:Kill()\n        end\n    end\n\n    --Returns a table of variables that dictate the behavior of the active item once it's been used.\n    return {\n        Discharge = true,\n        Remove = false,\n        ShowAnim = true\n    }\n    --The Afterbirth+ method of only returning `true` will also replicate the return behavior seen above.\n    --return true\nend\n\nmod:AddCallback(ModCallbacks.MC_USE_ITEM, mod.RedButtonUse, bigRedButton)\n</code></pre>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/active_item/#adding-charges-manually","title":"Adding charges manually","text":"<p>If you have a <code>chargetype</code> of <code>special</code>, you will require the use of EntityPlayer:SetActiveCharge. If you have   REPENTOGON, you can also use EntityPlayer:AddActiveCharge and set the <code>Force</code> argument to <code>true</code>.</p> <p>This snippet of code will loop through the player's inventory of active items (active items can appear in multiple different slots) and increase each item's charge by 1 every 10 seconds.</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\n\nlocal game = Game()\n\nlocal bigRedButton = Isaac.GetItemIdByName(\"Big Red Button\")\n\nlocal ONE_SECOND = 30\nlocal TEN_SECONDS = ONE_SECOND * 10\n--Will need to compare against the maximum amount of charges later to see if the active needs to be charged.\nlocal MAX_CHARGE = Isaac.GetItemConfig():GetCollectible(bigRedButton).MaxCharges\n\nfunction mod:ChargeActiveItem(player)\n    --Only run this code if we have our active item and that the game's timer has hit an interval of ten seconds.\n    if player:HasCollectible(bigRedButton) and game:GetFrameCount() % TEN_SECONDS == 0 then\n        --Will loop through the primary, secondary (from Schoolbag), and pocket item slot for active items.\n        for slot = ActiveSlot.SLOT_PRIMARY, ActiveSlot.SLOT_POCKET do\n            local maxCharge = MAX_CHARGE\n            local charge = player:GetActiveCharge(slot)\n            --Important to remember that The Battery will double the maximum charge of all actives.\n            if player:HasCollectible(CollectibleType.COLLECTIBLE_BATTERY) then\n                maxCharge = maxCharge * 2\n            end\n            --Check that it's our active item and it needs to be charged.\n            --There is an EntityPlayer:NeedsCharge() function, but it will always return `false` for `special` chargetype actives.\n            if player:GetActiveItem(slot) == bigRedButton and player:GetActiveCharge(slot) &lt; maxCharge then\n                --Will use the REPENTOGON-exclusive method of adding charges to the item, if available. Otherwise, uses the traditional method.\n                if REPENTOGON then\n                    player:AddActiveCharge(1, slot, true, false, true)\n                else\n                    player:SetActiveCharge(charge + 1, slot)\n                end\n            end\n        end\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_POST_PEFFECT_UPDATE, mod.ChargeActiveItem)\n</code></pre>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/challenges/","title":"Challenges","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Challenges change the gameplay of a regular run for a unique twist. This tutorial will cover how to create your own, and all of the attributes you can modify that are unique to challenges.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","REPENTOGON","XML","Lua"]},{"location":"tutorials/crash_course/challenges/#creating-your-challenge","title":"Creating your challenge","text":"<p>Creating a challenge requires a challenges.xml file in your <code>content</code> folder. They require the root <code>challenges</code> tag and its child <code>challenge</code> tag, where you define your individual challenges. Below are explanations for their variables:</p> Root <code>challenges</code> tag variables Variable Name Possible Values Description version int The version of the <code>challenges.xml</code> format. This must always stay equal to 1. <code>challenge</code> tag variables Variable-Name Possible Values Description id int In-game id of the challenge (Used only by vanilla challenges. Use the <code>name</code> variable instead.) name string Name of the challenge. startingitems string A comma separated list of ids for items granted to the player at the start. startingitems2 string A comma separated list of ids for items granted to player 2 (Esau when playing as Jacob &amp; Esau) at the start. startingtrinkets string Comma separated list of ids for trinkets that will be granted to the player at the start (max 2). startingcard string Card id of the starting cards.Default is <code>-1</code> (no card). startingpill string PillEffect id of the starting pill.Default is <code>-1</code> (no pill). playertype string Player type id.Default is <code>0</code> (Isaac). endstage string The last stage of the challenge (uses LevelStage internal ids). roomfilter string Comma separated list of RoomTypes to blacklist from generating (not all room types can be used). cursefilter int Bitmask of curses to blacklist from appearing.(Darkness = 1, Labyrinth = 2, Lost = 4, Unknown = 8, Cursed = 16, Maze = 32, Blind = 64, Giant = 128) getcurse int Bitmask of curses to always appear (same ids as <code>cursefilter</code>). achievements string List of achievement ids that are required to be able to play the challenge. altpath bool Determines if the player takes the light or dark path. Omit to allow either path, <code>true</code> to force Cathedral/Chest path, or <code>false</code> to force Sheol/Dark Room path. canshoot bool Determines if player can shoot.Default is <code>true</code> (shooting enabled). Cannot force characters who have <code>canshoot</code> set to <code>false</code> in their <code>players.xml</code> file to shoot, such as Lilith. redhp int Adds red hearts to the base of the chosen character. 1 = half heart. Negative numbers can be used to remove hp. maxhp int Adds red heart containers to the base of the chosen character. 2 = One red heart container. Negative numbers can be used to remove containers. soulhp int Adds soul hearts to the base of the chosen character. 1 = half soul heart. blackhp int Adds black hearts to the base of the chosen character. 1 = half black heart. coins int Adds starting coins. maxdamage bool If set to <code>true</code>, damage cannot go above <code>100</code>. adddamage float Adds damage to the player. minfirerate float Sets starting fire delay (not the same as the in-game tears stat, see here). minshotspeed bool Sets the maximum shot speed to <code>1.00</code>. bigrange bool Grants an additional 10 range. difficulty int Game difficulty (0: normal (default), 1: hard, 2: Greed, 3: Greedier)Greed and greedier mode work, but when killing Ultra Greed, the big Chest spawns, instead of a trophy. megasatan bool Last boss is Mega Satan. Adds both key pieces to the player. secretpath bool Force the Repentance alt path. <p>  REPENTOGON modifies some of the existing variables to allow for using modded content and adds its own set of <code>challenge</code> tag variables.</p>  REPENTOGON-exclusive <code>challenge</code> tag variables Variable Name Possible Values Description unlockachievement string Sets the achievement (preferably a modded one using the name of the achievement) to unlock when the challenge is completed. startingitems string This now supports modded items by using the names of the items instead of the ids. Same format as in vanilla, a comma separated list of values. startingitems2 string This now supports modded items by using the names of the items instead of the ids. Same format as in vanilla, a comma separated list of values. startingtrinkets string This now supports modded trinkets by using the names of the trinkets instead of the ids. Same format as in vanilla, a comma separated list of values. playertype string This now supports modded characters by using the names of the items instead of the ids. hidden boolean Anything but \"false\" would result in a hidden challenge that wont show up in the menu. achievements string Same as vanilla, comma separated list of achievements required to unlock the challenge. Use achievement names for modded achievements. lockeddesc string Hint to display instead of the challenge name when its locked. The default phrase is \"LOCKED :(\".","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","REPENTOGON","XML","Lua"]},{"location":"tutorials/crash_course/challenges/#example-challengesxml-file","title":"Example \"challenges.xml\" file:","text":"<p>This creates a new challenge called \"My challenge\" in the custom challenges tab, which ends after Mom's heart/It Lives. The player starts with Breakfast, Dead Cat and Little Steven, but cant shoot. Treasure rooms and Curse of Darkness are disabled. <pre><code>&lt;challenges version=\"1\"&gt;\n    &lt;challenge playertype=\"0\" name=\"My challenge\" endstage=\"8\" startingitems=\"25,81,100\" roomfilter=\"1\" cursefilter=\"1\" canshoot=\"false\" /&gt;\n&lt;/challenges&gt;\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","REPENTOGON","XML","Lua"]},{"location":"tutorials/crash_course/challenges/#making-modifications-through-lua","title":"Making modifications through Lua","text":"<p>Many variables available in the <code>challenges.xml</code> allow you to change attributes about challenges, however this is limited in what it can provide, and does not support modded content. This will require Lua code to change.</p> <p>The first step is to get the ID of your challenge with Isaac.GetChallengeIdByName and checking it against Isaac.GetChallenge. You can make any desired changes to your challenge through a simple <code>if</code> check to see if your challenge is active.</p> <pre><code>local mod = RegisterMod(\"My Challenge Mod\", 1)\n\n--Fetch your challenge's ID\nlocal MY_CHALLENGE = Isaac.GetChallengeIdByName(\"My new challenge\")\n\nfunction mod:OnGameStart(wasContinued)\n    --Fetch the current challenge ID\n    local challenge = Isaac.GetChallenge()\n    --Checks that the challenge is our challenge, and is not from a continued run.\n    if challenge == MY_CHALLENGE and not wasContinued then\n        --Whatever you'd like here.\n    end\nend\n\n--Will run when starting or continuing a run\nmod:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, mod.OnGameStart)\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","REPENTOGON","XML","Lua"]},{"location":"tutorials/crash_course/challenges/#first-time-modifications-to-the-player","title":"First-time modifications to the player","text":"<p>You may want to include modded content in your challenge on the player when they first spawn in your challenge. You will need to account for multiple players, doing it only when starting the challenge as opposed to continuing it, and potentially running this code again when using the Genesis collectible.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","REPENTOGON","XML","Lua"]},{"location":"tutorials/crash_course/challenges/#non-repentogon","title":"Non-REPENTOGON","text":"<p>Without REPENTOGON, special checks will need to be implemeneted. The following criteria must be met so that this will only trigger once per player when appropriate.</p> <ol> <li>The room has only been visited once. Checked with Room:IsFirstVisit.</li> <li>The current floor is the very first floor. Can check Level:GetStage against LevelStage.</li> <li>The player is inside the starting room. Can check  Level:GetCurrentRoomIndex against Level:GetStartingRoomIndex.</li> </ol> <p>It is also important to note that some things may need to be reapplied when using Genesis, such as re-adding items that were removed from the player. This can be a separate check to inact different behavior.</p> <p>This snippet of code will transform the current character into a new custom character \"Gabriel\" with a new item \"Damage Potion\". <pre><code>local mod = RegisterMod(\"My Challenge Mod\", 1)\n\nlocal game = Game()\nlocal MY_CHALLENGE = Isaac.GetChallengeIdByName(\"My new challenge\")\nlocal PLAYER_GABRIEL = Isaac.GetPlayerTypeByName(\"Gabriel\", false)\nlocal DAMAGE_POTION = Isaac.GetItemIdByName(\"Damage Potion\")\n\n--Function passes the player as its first and only argument\nfunction mod:OnPlayerInit(player)\n    local challenge = Isaac.GetChallenge()\n    local level = game:GetLevel()\n    local room = game:GetRoom()\n    local stage = level:GetStage()\n    local curIndex = level:GetCurrentRoomIndex()\n    local inGenesisRoom = curIndex == GridRooms.ROOM_GENESIS_IDX\n\n    if challenge == MY_CHALLENGE\n        --First visit to the room\n        and room:IsFirstVisit()\n        and (\n            --Is the player in Floor 1, and they're in the starting room?\n            (level:GetStage() == LevelStage.STAGE1_1 and curIndex == level:GetStartingRoomIndex())\n            --Or did the player enter the Genesis room?\n            or inGenesisRoom\n        )\n    then\n        --Genesis' default behavior does not enforce the starting character\n        if not isGenesisRoom then\n            player:ChangePlayerType(PLAYER_GABRIEL)\n        end\n        player:AddCollectible(DAMAGE_POTION)\n    end\nend\n\n--Runs when the player initializes from run start, run continue, or Genesis\nmod:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, mod.OnPlayerInit)\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","REPENTOGON","XML","Lua"]},{"location":"tutorials/crash_course/challenges/#repentogon","title":"REPENTOGON","text":"<p>All of the aforementioned implementations of modded content can be done directly through the <code>challenges.xml</code> with REPENTOGON. If there's anything that can't be done through the XML, no special checks are necessary, as the MC_PLAYER_INIT_POST_LEVEL_INIT_STATS callback does all that for you.</p> <p>This <code>challenges.xml</code> takes the previous XML and modifies the variables to start the challenge as \"Gabriel\" with a new item \"Damage Potion\". <pre><code>&lt;challenges version=\"1\"&gt;\n    &lt;challenge playertype=\"Gabriel\" name=\"My new challenge\" endstage=\"8\" startingitems=\"Damage Potion\" roomfilter=\"1\" cursefilter=\"1\" canshoot=\"false\" /&gt;\n&lt;/challenges&gt;\n</code></pre></p> <p>This Lua code will spawn a red heart for each player upon starting the challenge. <pre><code>local mod = RegisterMod(\"My Challenge Mod\", 1)\n\nlocal game = Game()\nlocal MY_CHALLENGE = Isaac.GetChallengeIdByName(\"My new challenge\")\n\n--Function passes the player as its first and only argument\nfunction mod:OnPlayerInit(player)\n    local challenge = Isaac.GetChallenge()\n\n    if challenge == MY_CHALLENGE then\n        local room = game:GetRoom()\n        local pos = room:FindFreePickupSpawnPosition(player.Position, 40)\n        Isaac.Spawn(EntityType.ENTITY_PICKUP, PickupVariant.PICKUP_HEART, HeartSubType.HEART_FULL, pos, Vector.Zero, player)\n    end\nend\n\n--Runs when the player initializes from run start, run continue, or Genesis\nmod:AddCallback(ModCallbacks.MC_PLAYER_INIT_POST_LEVEL_INIT_STATS, mod.OnPlayerInit)\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","REPENTOGON","XML","Lua"]},{"location":"tutorials/crash_course/character/","title":"Characters","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Characters are a core element and main attraction of the Binding of Isaac as a whole. This tutorial will cover how to create your own character and how to play as them yourself.</p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#video-tutorials","title":"Video tutorials","text":"","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#getting-the-required-files","title":"Getting the required files","text":"<p>A single character involves numerous files scattered across different folders in your mod. You can download this template that will have all the required files, which will be referenced throughout this tutorial.</p> <p>If you wish to reference and use existing files on each character in the vanilla game, they can be located in the game's directory inside <code>resources/gfx/characters/</code> (<code>resources-dlc3</code> for Repentance content, or <code>extracted_resources</code> for Repentance+ users) after extracting the game's resources.</p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#creating-your-character","title":"Creating your character","text":"<p>The very first step in creating a character is making an entry for your character in the <code>players.xml</code> file. This defines everything about the character such as their name, starting items, health, and spritesheets, as well as many other properties.</p> <pre><code>&lt;players root=\"gfx/characters/costumes/\" portraitroot=\"gfx/ui/stage/\" nameimageroot=\"gfx/ui/boss/\"&gt;\n    &lt;player name=\"Gabriel\"\n        skin=\"character_gabriel.png\"\n        nameimage=\"playername_gabriel.png\"\n        hp=\"4\"\n        armor=\"2\"\n        keys=\"1\"\n        portrait=\"playerportrait_gabriel.png\"\n        skinColor=\"-1\"\n        items=\"178\"\n    /&gt;\n&lt;/players&gt;\n</code></pre> <p>For every XML file, there is a tag that goes from the start of the file to the end of the file, and multiple \"child tags\" that act as the individual entries. In this instance, players.xml entries will start with <code>&lt;players&gt;</code> and end with <code>&lt;/players&gt;</code>, while individual character entries are the same but start and end with the <code>player</code> tag. Below are explanations of each variable contained within each of these tags.</p> root <code>players</code> tag variables Note <p>The variables in the players tag can be changed but should never be removed.</p> Variable Name Possible Values Description root string Root path of the character spritesheet. Used with the <code>skin</code> variable. portraitroot string Root path of the character portrait for the vs. screen and stage transition screen. Used with the <code>portrait</code> variable. nameimageroot string Root path of the character's name for the vs. screen. Used with the <code>nameimage</code> variable. <code>player</code> tag variables Note <p>The bare essential variables for creating a character are <code>name</code>, <code>hp</code>, <code>skin</code>, <code>skinColor</code>, <code>nameimage</code>, and <code>portrait</code>. All other variables are optional.</p> Variable Name Possible Values Description name string Name of the character (has to match the one in <code>CharacterMenu.anm2</code>). skin string Path of the character spritesheet. skinColor int Default skin color of the character (-1 = all, 0 = white, 1 = black, 2 = blue, 3 = red, 4 = green, 5 = grey). nameimage string Name for vs. screen. portrait string Portrait for the vs. screen and for the stage transition screen. extraportrait string .anm2 file that will be displayed on the vs. screen alongside the defined image in the <code>portrait</code> attribute. hp int Starting red health (1 = half heart). armor int Starting soul hearts (1 = half soul heart). black int Starting black hearts (1 = half black heart). items int Starting item ID (can separate with a comma to add more than one). Only vanilla items are supported. trinket int Starting trinket ID. Only vanilla trinkets are supported. costume int Costume assigned to the character. Reserved usually for vanilla costumes seen within this list, you can use this to add a costume unique to your character. See Adding a character-specific costume for more information. costumeSuffix string Equal to the suffix of a directory to use for character-specific costumes. For example, The Forgotten's costumeSuffix is <code>_forgotten</code>, which means that his corresponding directory is located at <code>resources-dlc3\\gfx\\characters\\costumes_forgotten</code>. bombs int Starting bombs. keys int Starting keys. coins int Starting coins. card int Starting card ID. pill int Starting pill effect ID. canShoot bool Set to <code>false</code> to disable shooting. achievement int Ties the character to a vanilla achievement. broken int Starting broken hearts. pocketActive int Starting pocket active item ID. Only vanilla active items are supported. birthright string Message when picking up Birthright. bSkinParent string Name of the normal version of your tainted character. hidden bool Set to <code>true</code> to hide the character in the character selection screen. <p>  REPENTOGON adds its own set of <code>player</code> tag variables for a wider variety of options on what your character can start with.</p>  REPENTOGON-exclusive <code>player</code> tag variables Variable Name Possible Values Description items string This now supports modded items by using the names of the items instead of the ids. Same format as in vanilla, a comma separated list of values (e.g. <code>items=\"My Cool Item,My Second Cool Item\"</code>). heartcontainers int Starting empty heart containers (1 = half container, half heart containers can only be filled halfway). redhearts int Starting red hearts (1 = half heart). soulhearts int Starting soul hearts (1 = half soul heart). blackhearts int Starting black hearts (1 = half black heart). These do not replace soul hearts and are applied after soul hearts. goldenhearts int Starting golden hearts (1 = 1 golden heart). bonehearts int Starting empty bone hearts (1 = 1 bone heart). eternalheart int If a character should start with an eternal heart (1 = yes). brokenhearts int Starting broken hearts (1 = 1 broken heart). rottenhearts int Starting rotten hearts (1 = 1 rotten heart). healthtype int The health type the player should start with. The integer corresponds to the HealthType enumerator. healthlimit int The maximum amount of HP the character should be able to have. <code>1 = 1/2 heart</code>. speedmodifier float An inherent offset to the speed stat the character should start with. Base this offset off of Isaac's stats. firedelaymodifier float An inherent offset to the fire delay stat the character should start with. Base this offset off of Isaac's stats. damagemodifier float An inherent offset to the damage stat the character should start with. Base this offset off of Isaac's stats. rangemodifier float An inherent offset to the range stat the character should start with. Base this offset off of Isaac's stats. shotspeedmodifier float An inherent offset to the shot speed stat the character should start with. Base this offset off of Isaac's stats. luckmodifier float An inherent offset to the luck stat the character should start with. Base this offset off of Isaac's stats. gigabombs int The amount of giga bombs the character should start with. These do not replace normal bombs. completionparent string Used for characters that have shared completion marks with a preexistent character, like Dark Judas and Judas. The name of the parent character should be used for this attribute. nomarks bool If it has any value other than <code>false</code>, it will hide the completion marks for the given character. noshake bool Will prevent characters from shaking during stage/boss screen transition (similarly to Keeper) if set to <code>true</code>. achievement int or string This is now respected on modded characters. For mods, it's best to define this as the name of the achievement (for example, <code>achievement='TaintedPeter'</code>, TaintedPeter being the name attribute of the achievement). Characters with this tag should have a second frame in their <code>characterportraits(alt).anm2</code> which should be the \"locked\" picture for the character. In addition, all stat/item layers on the main menu will be hidden and the <code>Unlocked By</code> layer will be visible. See the REPENTOGON achievements XML section for more info. modcostume int Set this to match the <code>id</code> attribute of a costume with <code>type=\"none\"</code> defined in the same mod in <code>costumes2.xml</code> to have that costume permanantly applied to the character (including during the mineshaft chase sequence). You cannot set both this and the <code>costume</code> attribute for vanilla costumes at the same time. See Adding a character-specific costume for more information.","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#spritesheets","title":"Spritesheets","text":"<p>With the <code>players.xml</code> set up, you can now technically play as your new character, but they will have no visuals whatsoever, rendering them invisible apart from their shadow. A majority of the work that goes into a character are their spritesheets.</p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#in-game-sprites","title":"In-game sprites","text":"<p>To start, let's go over the necessary spritesheets for your character inside a run:</p> <ol> <li>Character spritesheet, located in <code>gfx/characters/costumes/</code>. How your character is displayed while playing as them in a run. </li> <li>Name image. Located in gfx/characters/boss/. The name displayed for your character in the vs. screen. </li> <li>Portrait image, located in <code>gfx/characters/stage/</code>. The potrait displayed for your character in the vs. screen and the stage transition screen. </li> </ol> <p>Optionally, you may add a costume to your character. This is a separate spriteheet that will display on top of your character, useful if the costume you wish to add to your character's head or body is too big for the original spritesheet. See the Costumes tutorial for more information. </p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#ui-sprites","title":"UI sprites","text":"<p>Next are UI sprites for your character. These involve the character selection screen and few other sprites. Unlike the first set of sprites, these will require you create and edit .anm2 files in order to be visible in-game. All of these sprites are located within <code>content/gfx/</code>.</p> Note <p>All of these anm2s will require you create an animation with the name of your character.</p> <ol> <li>Character portrait. Uses <code>characterportraits.anm2</code>. The portrait you will see when selecting your character on the character selection menu, or when continuing a run while playing as that character. </li> <li>Character name and other attributes. Uses <code>charactermenu.anm2</code>. This covers the character's starting health, speed, damage, starting items, and their name on the character selection screen. </li> <li>Co-op menu icon. Uses <code>coop menu.anm2</code>. The small icon that will appear when a second player joins your run and is prompted to select a character to join in as. </li> <li>Death name. Uses <code>death screen.anm2</code>. The name of your character as it appears on \"Isaac's Last Will\" when your character dies. </li> </ol>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#controls-sprite","title":"Controls sprite","text":"<p>Uses <code>controls.anm2</code>. A late addition to the Repentance DLC is a unique set of sprites for every character showing how to play as them in the starting room. Many characters will follow the default set of Move, Attack, Bomb, and Item, showing a small doodle of the character performing said actions with the appropriate controls displayed below each section. Other characters have a unique version of this set of controls, replacing \"Item\" with a unique action related to how the character plays, or even inserting an entirely new doodle exclusive to the character's mechanics. If you do any unique modifications that require the display of a different button to press or moving them around, be sure to edit the anm2's null layers that position the appropriate controls.</p> Note <p>The vanilla game's controls sprites can be found in the game's extracted resources in <code>resources-dlc3/gfx/backdrop/controls.png</code>.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#creating-a-tainted-character","title":"Creating a tainted character","text":"<p>Tainted characters are \"B-Side\" versions of an existing character. These are optional to create, and if left out, the game will display your normal character on both the normal and tainted character menus. If you do wish to create one, they require a specific setup so that they are registered as a tainted version of your normal character,\\ with their own set of sprites as opposed to just another character to select.</p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#playersxml-changes","title":"<code>players.xml</code> changes","text":"<p>When creating a tainted character, the only change you must make to your new character entry is the addition of the <code>bSkinParent</code> variable, usually right next to your character's <code>name</code>. Here you put the name of normal character you wish to link to your tainted character.</p> Note <p>It is recommended to keep your tainted character's name the same as it's normal side. So, if your normal character's name is Gabriel, your tainted version's name should also be Gabriel. This is how it's done in vanilla.</p> <pre><code>&lt;players root=\"gfx/characters/costumes/\" portraitroot=\"gfx/ui/stage/\" nameimageroot=\"gfx/ui/boss/\"&gt;\n    &lt;player name=\"Gabriel\"\n        skin=\"character_gabriel.png\"\n        nameimage=\"playername_gabriel.png\"\n        hp=\"4\"\n        armor=\"2\"\n        keys=\"1\"\n        portrait=\"playerportrait_gabriel.png\"\n        skinColor=\"-1\"\n        items=\"178\"\n    /&gt;\n\n    &lt;player name=\"Gabriel\"\n        skin=\"character_gabriel_b.png\"\n        nameimage=\"playername_gabriel.png\"\n        hp=\"4\"\n        armor=\"2\"\n        keys=\"1\"\n        portrait=\"playerportrait_gabriel_b.png\"\n        skinColor=\"-1\"\n        bSkinParent=\"Gabriel\"\n        costumeSuffix=\"gabrielb\"\n        costume=\"104\"\n    /&gt;\n&lt;/players&gt;\n</code></pre>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#content-anm2-files","title":"Content anm2 files","text":"<p>Inside <code>content/gfx</code>, when making a tainted character, you will need to copy and rename several anm2s so that the game knows they're for tainted characters. Below is a list of all the available files you can rename and edit:</p> Original ANM2 name Tainted ANM2 name charactermenu.anm2 charactermenualt.anm2 characterportrait.anm2 characterportraitalt.anm2 controls.anm2 controls alt.anm2 coop menu.anm2 coop menu alt.anm2 death screen.anm2 death screen alt.anm2","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/character/#pocket-actives","title":"Pocket actives","text":"<p>Tainted characters are commonly associated with having pocket actives, which are active items in Isaac's pocket slot, where cards, pills, and more are stored. If you want to add one to your character,   REPENTOGON allows you to use the <code>pocketActive</code> variable with a name instead of an item ID, allowing you to put the name of a custom modded item. Without REPENTOGON, it must be added through Lua.</p> <p>The process of adding the pocket active can be broken down into three easy steps: 1. Only grant it once when they are first initialized, as it is not necessary otherwise. <pre><code>local mod = RegisterMod(\"Gabriel Character Mod\", 1)\n\n--MC_POST_PLAYER_INIT will provide the player as the first and only argument, so we define it here in our function.\nfunction mod:OnPlayerInit(player)\n\nend\n\n--Triggers when starting a run, a co-op player spawns, when entering the Genesis room, or when continuing a run.\n--The extra `0` at the end is so that it only triggers for regular players, as a variant of 1 is for co-op babies.\nmod:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, mod.OnPlayerInit, 0)\n</code></pre> 2. Getting the IDs needed to check that its our character and that we don't already have the item in our pocket slot. <pre><code>local mod = RegisterMod(\"Gabriel Character Mod\", 1)\n\n--Each character has a unique ID, refered to as \"PlayerType\".\n--This function fetches our character's PlayerType. The `true` at the end is for if this is a tainted character. It's false by default for non-tainteds.\nlocal TAINTED_GABRIEL = Isaac.GetPlayerTypeByName(\"Gabriel\", true)\n\n--This function returns the ID for our item.\nlocal HOLY_OUTBURST = Isaac.GetItemIdByName(\"Holy Outburst\")\n\nfunction mod:OnPlayerInit(player)\n    --EntityPlayer:GetPlayerType() returns the player's PlayerType. Check that it matches our character's PlayerType.\n    if player:GetPlayerType() == TAINTED_GABRIEL\n        --EntityPlayer:GetActiveItem() returns the item ID available in a specific active item slot. Check that it DOES NOT match our item's ID to trigger our code.\n        and player:GetActiveItem(ActiveSlot.SLOT_POCKET) ~= HOLY_OUTBURST\n    then\n\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, mod.OnPlayerInit, 0)\n</code></pre> 3. Add the active item to the pocket slot, and some extra setup. <pre><code>local mod = RegisterMod(\"Gabriel Character Mod\", 1)\n\nlocal TAINTED_GABRIEL = Isaac.GetPlayerTypeByName(\"Gabriel\", true)\nlocal HOLY_OUTBURST = Isaac.GetItemIdByName(\"Holy Outburst\")\n--We only ever need to call this once, so we save it here for later.\nlocal game = Game()\n\nfunction mod:TaintedGabrielInit(player)\n    if player:GetPlayerType() == TAINTED_GABRIEL\n        and player:GetActiveItem(ActiveSlot.SLOT_POCKET) ~= HOLY_OUTBURST\n    then\n        --EntityPlayer:SetPocketActiveItem(CollectibleType ItemID, integer ActiveSlot, boolean KeepInPools)\n        --We would normally want to set KeepInPools to `false`, but due to a bug, doing so and exiting &amp; continuing your run will crash the game.\n        player:SetPocketActiveItem(HOLY_OUTBURST, ActiveSlot.SLOT_POCKET, true)\n\n        --Since we don't want the item to reappear inside any item pools, we remove it manually.\n        local itemPool = game:GetItemPool()\n        itemPool:RemoveCollectible(HOLY_OUTBURST)\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, mod.TaintedGabrielInit, 0)\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+","REPENTOGON","XML"]},{"location":"tutorials/crash_course/costumes/","title":"Costumes","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Costumes are the extra layers of sprites that are added onto Isaac to change his appearance. Costumes can be given from items, characters, and even directly under some circumstances. This tutorial will cover how to create and add your own custom costumes.</p>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#video-tutorial","title":"Video tutorial","text":"","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#creating-a-costume","title":"Creating a costume","text":"<p>All costumes require a <code>.anm2</code> file. When creating your costume, it is easiest to reference, copy, or modify an existing costume from the game, as it will already have all the layers and frames laid out for you. For example, if you're trying to make a costume that gives Isaac a hat, you could reference something like Black Candle's costume (located in <code>resources/gfx/characters/260_blackcandle.anm2</code>). You can find costume <code>.anm2</code> files inside <code>resources/gfx/characters/</code> after extracting the game's resources.</p> <p>Each animation in a costume corresponds to an animation in the player <code>.anm2</code> file (<code>resources/gfx/001.000_player.anm2</code>). Each keyframe in this animation corresponds to that keyframe of the player. For example, if creating a costume that affects Isaac's body, you will want to create animations for each directional walk animation in the player <code>.anm2</code> file, and copy the keyframes from those.</p> <p></p>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#costume-layers","title":"Costume layers","text":"<p>All of the game's costumes work via layers. A costume can occupy one or more layers, though each layer can only hold one spritesheet at a time. There are a total of 15 layers, although mods can only use 13 of these. Additionally, there is a set order of when each layer is rendered. Below is the list of layers that mods can use in order of render priority, from being rendered first to last (layers rendered first will appear behind layers rendered last):</p> <p></p> Layer render priority Layer name Description glow Rendered behind the head. Used for glowing auras, such as with items like Mysterious Liquid body Directly replaces Isaac's body body0 Rendered over the body body1 Rendered over the body head Directly replaces Isaac's head head0 Usually character-specific costumes (e.g. Magdalene's hair) head1 Rendered over the head head2 Rendered over the head head3 Rendered over the head head4 Rendered over the head head5 Rendered over the head top0 Used for wing costumes when walking upwards. Attached to the body's direction, but renders above the head back Attached to the head. Exclusively used by the Venus costume for the back view of the hair. Best seen with a costume that removes the body <p>You can find a spreadsheet documenting every costume and the layers they occupy by clicking here.</p> <p>A costume can have any combinations of these layers. Any layers not a part of this list will not appear on Isaac.</p> <p>If two costumes that occupy the same layer are added onto Isaac, only the one with the highest <code>priority</code> will be rendered. If two costumes of equal priority occupy the same layer, then only the one that was added most recently will render. Priorities are defined in the <code>costumes2.xml</code> file.</p> <p>If a costume with more than one layer has one of its layers conflicting with another costume and is of the lower priority, the other layers will still be rendered, allowing for a unique mismatch of different sprites on multiple layers.</p>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#animated-costumes","title":"Animated costumes","text":"<p>Animated costumes can be done by adding <code>_Idle</code> after the animation name. The animation restarts from the first frame when switching to a different animation (e.g. <code>HeadRight_Idle</code> to <code>HeadDown_Idle</code>). Make sure to check the loop box at the bottom of the animation editor in order for your animation to loop. Standard layer rendering priority still applies, so you can have an animated <code>head0</code> layer while having a static <code>head4</code> layer.</p> <p>You can also add <code>_Overlay</code> after the animation name to animate on top of the player's animation instead of replacing it. For example, <code>HeadDown_Overlay</code> animates on top of the player's <code>HeadDown</code> animation, while <code>HeadDown_Idle</code> replaces the player's <code>HeadDown</code> animation.</p> <p>Some costumes, like the second form of the Wavy Cap costume (<code>resources/gfx/characters/029x_wavycap2.anm2</code>), have both an overlay and an idle animation.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#adding-a-costume","title":"Adding a costume","text":"<p>All costumes entries are defined in a costumes2.xml file, located in the <code>content</code> folder at the root of your mod folder. In this folder, there must be a root <code>costumes</code> tag. This tag has an <code>anm2root</code> property, which should point to the root directory of where your costumes are stored, usually <code>gfx/characters/</code>.</p> <pre><code>&lt;costumes anm2root=\"gfx/characters/\"&gt;\n\n&lt;/costumes&gt;\n</code></pre> <p>When defining a costume inside of a <code>costumes</code> root tag, your <code>costume</code> is required to have at least a <code>anm2path</code> property and a <code>type</code> property.</p> <ul> <li>The <code>anm2path</code> tag holds the path to your costume, starting from the <code>anm2root</code> property in the root <code>costumes</code> tag.</li> <li>The <code>type</code> tag tells the game what type of costume you're creating. There are 5 types of costumes:<ul> <li><code>passive</code> costumes will be added when a passive item is added to Isaac's inventory (after Isaac is done holding it over his head), and will be removed automatically if the passive item is lost.</li> <li><code>familiar</code> costumes function the same as <code>passive</code> costumes, but for items defined as familiars in <code>items.xml</code>.</li> <li><code>active</code> costumes will be added when an active item is used, and will be removed automatically upon entering a new room.</li> <li><code>trinket</code> costumes will be added when a trinket is added to Isaac's inventory (after Isaac is done holding it over his head), and will be removed automatically if the trinket is dropped.</li> <li><code>none</code> costumes are known as \"null costumes\", and must be applied manually through code.</li> </ul> </li> </ul> <pre><code>&lt;costumes anm2root=\"gfx/characters/\"&gt;\n    &lt;costume anm2path=\"some_passive_costume.anm2\" type=\"passive\" /&gt;\n    &lt;costume anm2path=\"some_familiar_costume.anm2\" type=\"familiar\" /&gt;\n    &lt;costume anm2path=\"some_active_costume.anm2\" type=\"active\" /&gt;\n    &lt;costume anm2path=\"some_trinket_costume.anm2\" type=\"trinket\" /&gt;\n    &lt;costume anm2path=\"some_null_costume.anm2\" type=\"none\" /&gt;\n&lt;/costumes&gt;\n</code></pre> Applying null costumes <p>To apply a null costume, you must get its ID using <code>Isaac.GetCostumeIdByPath(\"filePath\")</code>, and apply it on the player with <code>EntityPlayer:AddNullCostume(costumeId)</code>.</p> <p>Additionally, <code>Isaac.GetCostumeIdByPath</code> will return <code>-1</code> if the costume's path isn't defined in <code>costumes2.xml</code>. Attempting to add a costume with an ID of -1 or any ID that doesn't correlate to an existing costume will cause the game to crash.</p> <pre><code>-- At the top of your Lua file...\nlocal costumeId = Isaac.GetCostumeIdByPath(\"gfx/characters/some_null_costume.anm2\")\n\n-- Somewhere else in your code...\nlocal player = Isaac.GetPlayer(0)\nplayer:AddNullCostume(costumeId)\n</code></pre> <p>There are some additional properties you can add to your <code>costume</code> tag for extra customization.</p> <ul> <li><code>priority</code> defines the priority of the costume if it were to have a layer than conflicts with a different costume's layer (see costume layers).</li> <li><code>overwriteColor</code> defines if a costume should override the player's skin color with the <code>skinColor</code> property.</li> <li><code>skinColor</code> defines the id of the skin color that the player's skin will be changed to.</li> <li><code>hasSkinAlt</code> defines if a costume has alternate spritesheets depending on the skin color of the player. These spritesheets should be in the same folder as the original spritesheet, but with a different suffix to its file name. This suffix correspond to the skin color the spritesheet is for. The skin colors are <code>_black</code>, <code>_blue</code>, <code>_green</code>, <code>_grey</code>, <code>_red</code>, and <code>_white</code> (example: a spritesheet at <code>gfx/characters/costumes/face.png</code>, with an alternate spritesheet for the red skin color at <code>gfx/characters/costumes/face_red.png</code>).</li> <li><code>forceBodyColor</code> defines if a costume will always force the body color to be the defined skin color.</li> <li><code>forceHeadColor</code> defines if a costume will always force the head color to be the defined skin color.</li> <li><code>isFlying</code> defines if the costume is meant for something that grants flight.</li> <li><code>hasOverlay</code> defines is a costume is using an overlay effect, also known as an animated costume.</li> </ul>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#adding-a-character-specific-costume-replacement","title":"Adding a character-specific costume replacement","text":"<p>Some characters have unique head shapes or faces, and may require alternate spritesheets for certain costumes in order to make them look natural. These character-specific variants are added through costume suffix folders.</p> <p>Inside your costumes folder (usually <code>resources/gfx/characters/</code>), you can create a folder that houses these costumes for your character. The folder should start with the name <code>\"costume_\"</code>, and end with a suffix defined in <code>players.xml</code>. Either define <code>costumeSuffix</code> in your character's <code>players.xml</code> entry (e.g. <code>costumeSuffix=\"mycharacter\"</code>), or use an existing suffix from the vanilla characters. The complete folder name should look something like \"<code>costumes_mycharacter</code>\". For reference, the existing vanilla suffixes are:</p> <ul> <li>shadow (Dark Judas, Tainted Judas)</li> <li>lilith</li> <li>keeper</li> <li>apollyon</li> <li>forgotten</li> <li>forgottensoul</li> <li>lilithb</li> </ul> <p>Within your costume suffix folder, place your alternate <code>.png</code> file with the exact same name as the spritesheet you wish to replace. The game will automatically use this spritesheet instead of the default one.</p> <p></p>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#adding-a-character-specific-costume","title":"Adding a character-specific costume","text":"<p>Custom characters use a costume in order to have a different default appearance than Isaac. For example, Cain has a costume for his eyepatch. There are 3 ways to add a costume such that it will only appear on your own custom character.</p>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#lua","title":"Lua","text":"<p>As mentioned earlier, you can set up your costume to be a null costume and add it through code. You can add your costume under the <code>MC_POST_PLAYER_INIT</code> callback for when your player initializes, and for extra safety, on <code>MC_POST_NEW_ROOM</code> in case it was accidentally removed.</p> Warning <p>Costumes added this way are not protected from being removed by the Mother's Shadow escape sequence, or by things which reroll your items, such as the D4.</p> <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal MY_PLAYER = Isaac.GetPlayerTypeByName(\"My Character\", false)\nlocal MY_COSTUME = Isaac.GetCostumeIdByPath(\"gfx/characters/my_costume.anm2\")\n\nfunction mod:AddPlayerCostume(player)\n    --Check by PlayerType, not name, to ensure it's our character\n    if player:GetPlayerType() == MY_PLAYER then\n        --Add the costume\n        player:AddNullCostume(MY_COSTUME)\n    end\nend\n\nfunction mod:AddCostumeOnNewRoom()\n    --Most reliable way to search through players in the room\n    for _, ent in ipairs(Isaac.FindByType(EntityType.ENTITY_PLAYER)) do\n        --Isaac.FindByType passes an Entity. Turn it into an EntityPlayer to use player-specific functions\n        local player = ent:ToPlayer()\n        --Call the function above that already has the code we want\n        mod:AddPlayerCostume(player)\n    end\nend\n\n--The 0 here is for actual players, so not co-op babies, but still including co-op ghosts\nmod:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, mod.AddPlayerCostume, 0)\nmod:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, mod.AddCostumeOnNewRoom)\n</code></pre>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#xml-non-repentogon","title":"XML (Non-REPENTOGON)","text":"<p>Using XML to add a costume will ensure it will never be removed by rerolls, or by the Mother's Shadow escape sequence. Vanilla characters get around this by adding a <code>costume</code> property with the ID of the costume that the character should have. Because modded costumes do not have IDs, the only solution to this is to use one of vanilla game's player-specific costumes that has the appropriate layers we need, and to replace its spritesheet in our character's costume suffix folder.</p> <p>Inside the <code>players.xml</code> file where you have your custom character defined, add the <code>costume</code> property and set it to an existing vanilla null costume. You can get a good idea of the IDs of each null costume through the NullItemID enumeration, or by looking in the <code>costumes2.xml</code> folder inside the game's extracted resources.</p> <p>In this example, we will make a custom costume for our character's hair that uses Flipped Tainted Lazarus' costume as a base, as this costume is never added to other characters in the game through normal means.</p> <pre><code>&lt;players root=\"gfx/characters/costumes/\"\n         portraitroot=\"gfx/ui/stage/\"\n         nameimageroot=\"gfx/ui/boss/\"&gt;\n    &lt;player name=\"My Character\" skin=\"character_mycharacter.png\"\n            hp=\"6\"\n            nameimage=\"playername_mycharacter.png\"\n            portrait=\"playerportrait_mycharacter.png\"\n            costume=\"34\"\n            costumeSuffix=\"mycharacter\"\n            birthright=\"???\" /&gt;\n&lt;/players&gt;\n</code></pre> <p>Next, we'd create an alternate spritesheet based off of <code>resources/gfx/characters/character_009b_lazarus2hair.png</code>, and put that in our costumes suffix files (e.g. <code>costumes_mycharacter</code>).</p>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/costumes/#xml-repentogon","title":"XML (REPENTOGON)","text":"<p>  REPENTOGON adds a method to add your own costume through the <code>modcostume</code> property you can add to your character inside <code>players.xml</code>.</p> <p>First, define a null costume in <code>costumes2.xml</code>. Unlike for normal null costumes, you'll need to set an ID! This will not overlap with IDs from costumes of other types (passive, familar, active, trinket), or from other mods.</p> <pre><code>&lt;!-- costumes2.xml --&gt;\n&lt;costumes anm2root=\"gfx/\"&gt;\n    &lt;costume id=\"0\" anm2path=\"characters/some_null_costume.anm2\" type=\"none\" /&gt;\n&lt;/costumes&gt;\n</code></pre> <p>Then, add <code>modcostume</code> to your character's <code>players.xml</code> entry, and set it to the ID you defined for the costume.</p> <pre><code>&lt;!-- players.xml --&gt;\n&lt;players root=\"gfx/characters/costumes/\"\n         portraitroot=\"gfx/ui/stage/\"\n         nameimageroot=\"gfx/ui/boss/\"&gt;\n    &lt;player name=\"My Character\" skin=\"character_mycharacter.png\" hp=\"6\"\n            nameimage=\"playername_mycharacter.png\"\n            portrait=\"playerportrait_mycharacter.png\" modcostume=\"0\"\n            birthright=\"???\" /&gt;\n&lt;/players&gt;\n</code></pre>","tags":["Tutorial","Beginner friendly","Video","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/creating_a_mod/","title":"Creating a mod","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>This tutorial will cover the creation of a basic Isaac mod that replaces a sprite. This tutorial assumes you're using Windows, although the process is largely the same on Linux machines.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/creating_a_mod/#video-tutorial","title":"Video tutorial","text":"","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/creating_a_mod/#making-your-mods-folder","title":"Making your mod's folder","text":"<p>In Repentance and Repentance+, all mods are stored in your <code>mods</code> folder, located in the game's directory. To find the game's directory, you can click the gear icon on the game in your library on Steam, hover over \"Manage\", then click \"Browse local files\".</p> <p></p> <p>Inside of your <code>mods</code> folder, create a new folder. You can name this anything. Launching the game will put a file named <code>metadata.xml</code> into your new mod's folder. This folder holds the name of your mod in the mods list.</p> <p>The mods list is sorted by load order, and the load order is determined by the placement of your mod alphabetically. So mods with symbols at the beginning of their name will be placed at the top of the list, and therefore are loaded first.</p> <p></p> <p>You can change the text within the <code>name</code> tag here. The description can be set when you upload the mod to the Steam Workshop. Additionally, other tags may appear in this file after uploading the mod.</p> <p>This is technically all you need to do to create a mod. The rest of the tutorial will be focused on creating a basic resprite mod.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/creating_a_mod/#extracting-the-games-resources","title":"Extracting the game's resources","text":"<p>To replace a sprite (or any asset in the game), you must place a file in your mods folder that mirrors the file path of what you're trying to replace, whether that be an item sprite or a sound. In this tutorial, we'll be focusing on replacing the D6, but first we need to know where the D6 is stored in the game's file structure in order to replicate that within our mod.</p> <p>Open the game's directory as we did before, and open the <code>tools</code> folder. Within the <code>tools</code> folder, open the <code>ResourceExtractor</code> folder. Double-clicking <code>ResourceExtractor.exe</code> will run the resource extraction program. This may take a while, so wait for it to complete its process.</p> <p></p> <p>The place the game's files will extract to depend on what DLC of the game you have enabled.</p> <p>For Repentance users, check the game's directory. You will find a <code>resources</code> folder, as well as multiple folders deriving the name <code>resources-dlc3</code>. Content added in the Repentance DLC will be found in the <code>resources-dlc3</code> folder, with content for other languages found in one of the other <code>resources-dlc3</code> folders (for example, Japanese resources can be found in <code>resources-dlc3.jp</code>). All other content will be found in the <code>resources</code> folder, including some sprites that were changed in the Repentance DLC.</p> <p>For Repentance+ users, find the new <code>extracted-resources</code> folder within the game's directory. Here you will find a <code>resources</code> folder, as well as other <code>resources</code> folders for different translations of the game. In Repentance+, the <code>resources-dlc3</code> and <code>resources</code> folders were merged, meaning most assets in the game can now be found in the <code>resources</code> folder.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/creating_a_mod/#replacing-assets-with-your-mod","title":"Replacing assets with your mod","text":"<p>Now that we have extracted the game files, we can get to replacing the D6's sprite in our mod.</p> <p>First, we must find where the D6's sprite is located in the game's file structure. It can be found at this path within the <code>resources</code> folder: <code>gfx/items/collectibles/collectibles_105_dice.png</code></p> <p>Now we must mimic this same file structure within our mod. Go back to your mod's folder and create a folder named <code>resources</code>. Within this folder, create a folder name <code>gfx</code>, then within that a folder named <code>items</code>, then <code>collectibles</code>, then finally place the sprite in there with the exact same name as the sprite you're replacing (in this case, <code>collectibles_105_dice.png</code>). Keep in mind that this is cAsE-sEnSiTiVe!</p> Warning <p>When replacing images, you must make sure your image is encoded in 32-bit, and is a PNG. Aseprite handles this by default. Otherwise, you must find out how to configure this in the art progarm of your choice.</p> <p></p> <p>After adding new resources to your mod, make sure you restart your game to see the changes.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/enemies/","title":"Creating enemies","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Enemies (or <code>EntityNPCs</code> as the game defines them) make up an important part of Isaac's gameplay. This tutorial will cover the bare essentials for creating an enemy. This tutorial will not cover enemy AI or having them appear within rooms.</p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/enemies/#video-tutorial","title":"Video tutorial","text":"","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/enemies/#entities2xml-entry","title":"entities2.xml entry","text":"<p>As with any entity, the enemy needs to be defined first. The previous article on entity basics covered many of the tag variables that could be applied to any entity. This section will cover tags that have exclusive functionality to enemies.</p> <code>entity</code> tag variables Variable Name Possible Values Description boss int Whether or not the entity is considered a boss. 1 = allowed, 0 = disallow. Default = '0'. bossID int Custom entities cannot take advantage of this. The unique boss ID associated with the entity, used for other things such as entries inside <code>bosspools.xml</code>. champion int Allow champion variants of this entity. 1 = allowed, 0 = disallow. Default = '0'. stageHP int How much additional maximum health the entity gains with each stage. Read here for more information. portrait int Used in conjunction with the entities <code>deathanm2</code> tag to determine what portrait to show on Isaac's Last Will. The number correlates to the frame in the anm2 file, starting from <code>0</code>. Required for the entity being displayed in the Bestiary.See Addiing the enemy to the Bestiary for more information. hasFloorAlts bool If set to <code>true</code>, floor specific sprites should be used for this entity if they exist. Default = <code>false</code>.See Floor specific sprites for more information. reroll bool Deprecated as of Repentance. Use the noreroll tag instead. shutdoors bool Determines whether this entity will prevent doors from staying closed. Only used for enemies. Default = <code>true</code>. shieldStrength int Entity takes less damage relative to Isaac's DPS, known primarily as \"armor\". The higher the number, the less damage is taken. Default = <code>0</code>.See this page for more information on the mechanic. bestiaryAnim string Unused by vanilla and was an old way for defining bestiary entries. See Addiing the enemy to the Bestiary for more information about the Bestiary. bestiaryOverlay string Unused by vanilla and was an old way for defining bestiary entries. See Addiing the enemy to the Bestiary for more information about the Bestiary. <p>A full entities2.xml entry on a custom enemy named \"Level 2 Roundy\". Refer back to this entry for subsequent chapters below. <pre><code>&lt;entities anm2root=\"gfx/\" version=\"5\" deathanm2=\"gfx/enemy_death_portraits.anm2\"&gt;\n    &lt;entity name=\"Level 2 Roundy\"\n    id=\"678\" anm2path=\"monsters/roundy2/roundy2.anm2\" portrait=\"0\"\n    collisionMass=\"100\" collisionRadius=\"20\" friction=\"1\"\n    numGridCollisionPoints=\"8\" shadowSize=\"0\" champion=\"1\"\n    baseHP=\"22\" stageHP=\"0\" collisionDamage=\"1\"&gt;\n        &lt;gibs amount=\"6\" blood=\"1\" eye=\"1\" gut=\"1\" /&gt;\n        &lt;bestiary anim=\"Idle\" transform=\"0,0,1\" /&gt;\n        &lt;devolve id=\"276.0.0\" weight=\"1\" /&gt;\n    &lt;/entity&gt;\n&lt;/entities&gt;\n</code></pre></p> Defining IDs for custom enemies <p>There are hundreds of mods on the Steam Workshop that add custom enemies. Unfortunately, if two enemies from two different mods happen to have the same id and variant, it will not automatically assign a new variant. </p> <p>To mitigate this conflict occuring, group your enemies under the same <code>id</code> and make lots of <code>variants</code> for completely custom enemies, or repeat this for <code>variant</code> and <code>subtype</code> for variations of existing vanilla enemies. Define arbitrary large numbers under the cap of <code>4095</code> (or <code>255</code> for subtypes) to lessen the chance of conflicting IDs.</p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/enemies/#floor-specific-sprites","title":"Floor specific sprites","text":"<p>If an entity has the attribute <code>hasFloorAlts</code> set to <code>true</code>, the game tries to load the spritesheet of the entity with an additional suffix, based on the current stage. The suffix of a stage is defined in the <code>suffix</code> attribute in the stages.xml file. If no sprite can be found, it will load the default spritesheet.</p> <p>For example, if the original spritesheet's file path is <code>monster_017_gaper.png</code> and the suffix is <code>_downpour</code>, the spritesheet will be replaced with <code>monster_017_gaper_downpour.png</code> if it exists.</p> <p>Suffix per stage:</p> Stage-Name Suffix Flooded Caves _downpour Downpour _downpour Dross _dross Ashpit _ashpit Mausoleum _mausoleum Gehenna _gehenna <p>  REPENTOGON adds a floor suffix to every stage in the game.</p>  REPENTOGON stage suffixes <ul> <li>Flooded Caves does not have its own suffix due to the vanilla game tying it to Downpour instead.</li> <li>The Void does not have its own suffix as it generates random rooms from other stages and uses the local stage ID of the current room for its set of floor alt skins.</li> </ul> Stage-Name Suffix Basement _basement Cellar _cellar Burning Basement _burningbasement Caves _caves Catacombs _catacombs Flooded Caves _downpour Depths _depths Necropolis _necropolis Dank Depths _dankdepths Womb _womb Utero _utero Scarred Womb _scarredwomb Blue Womb/??? _bluewomb Sheol _sheol Cathedral _cathedral Dark Room _darkroom Chest _chest Downpour _downpour Dross _dross Mines _mines Ashpit _ashpit Mausoleum _mausoleum Gehenna _gehenna Corpse _corpse Home _home","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/enemies/#devolve-child-tag","title":"<code>devolve</code> child tag","text":"<p>When this entity is devolved through the D10 collectible or  Game:DevolveEnemy, this tag is used to determine what entity it should be devolved into. The game only uses the first <code>devolve</code> tag defined.</p> Variable Name Possible Values Description id string The entity to devolve into. This variable is unique where the ID, variant, and subtype are all combined into one string separated by periods in the format of <code>Type.Variant.Subtype</code> (e.g. A regular Gaper would be defined as <code>10.1.0</code>). Effect entities should use the type of 999 instead of 1000, as 1000 is reserved for rocks (used by Stone Grimaces). For rocks, the variant and subtype is ignored. weight float Completely ignored by the game, but would likely be used to determine the relative likelihood of this devolution be chosen. Default = <code>1</code>. <p>Level 2 Roundy has the following definition for their <code>devolve</code> tag, which devolves into a Roundy: <pre><code>&lt;devolve id=\"276.0.0\" weight=\"1\" /&gt;\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/enemies/#adding-the-enemy-to-the-bestiary","title":"Adding the enemy to the Bestiary","text":"<p>For your enemy to be seen within the Bestiary, three requirements must be met:</p> <ol> <li>The <code>bestiary</code> child tag exists.</li> <li>The <code>portrait</code> variable exists.</li> <li>Your enemy has been encountered at least once within a run.</li> </ol> <p>The <code>bestiary</code> child tag has a few variables to specify how the enemy is displayed in the Bestiary when selected. Any animations that play will automatically loop, even if not defined as a looping animation in the anm2 file.</p> Variable Name Possible Values Description anim string Animation to play for the entity in the entity's anm2. transform string A comma-separated string of X and Y coordinate position offsets and custom scale, defined as <code>\"X,Y,Scale\"</code>. Scale is a multiplier. Default = <code>0,0,1</code>. overlay string An optional overlay animation to play for the entity. This will play a separate animation that renders over the <code>anim</code> sprite animation. anm2path string An optional separate anm2 file to use exclusively for the Bestiary. alt string An optional floor alt to use (e.g. <code>_downpour</code>). Omit to not use a floor specific sprite. <p>For the <code>portrait</code> variable, you will need an anm2 file defined in the <code>deathanm2</code> variable within the <code>entities2</code> root tag and placed within your mod's <code>content/gfx/</code> folder. There must be one animation and one layer that contains frames for every single portrait. The first frame is frame <code>0</code>, so your portrait variable should start from <code>0</code>.</p> <p>Level 2 Roundy has their portrait set to <code>0</code>, alongside the following definition for their <code>bestiary</code> tag: <pre><code>&lt;bestiary anim=\"Idle\" transform=\"0,0,1\" /&gt;\n</code></pre> The preview animation will play the animation in the anm2 file named \"Idle\". The X and Y offsets for the animation are 0, and the scale of the animation is 1.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/","title":"Entity Basics","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Entities make up the majority of anything that moves inside The Binding of Isaac, from tears to enemies to Isaac himself. This tutorial will cover the basics on creating a custom entity.</p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#video-tutorial","title":"Video tutorial","text":"","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#creating-an-entity","title":"Creating an entity","text":"<p>To create an entity, you will only need an entities2.xml file located within your mod's content folder. There is a lot of content involved with each of the XML's available tags, so this tutorial will cover over them in individual sections.</p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#entities-tag","title":"<code>entities</code> tag","text":"<p>This is the root tag. All <code>entities2.xml</code> files must start and end with this tag.</p> root <code>entities</code> tag variables Variable Name Possible Values Description anm2root str Root path of the anm2 files used for each entity, set to <code>gfx/</code> by default. version string The version of the <code>items.xml</code> format. This must always stay equal to 5. deathanm2 string Optional. Root path of the anm2 file used for showing death portraits of enemies.","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#entity-tag","title":"<code>entity</code> tag","text":"<p>This is the tag used to define an entity.</p> <code>entity</code> tag variables <p>This list excludes enemy-specific variables. You can find those in the Enemies article.</p> Note <p>The majority of variables, for most intensive purposes, are optional. The vanilla <code>entities2.xml</code> file contains more than necessary for every entry.</p> <ul> <li><code>name</code>, <code>id</code>, <code>variant</code>, <code>anm2path</code>, <code>friction</code>, and <code>shadowSize</code> are baseline variables for any entity.</li> <li><code>collisionRadius</code>, <code>collisionMass</code>, and <code>numGridCollisionPoints</code> should be included for entities with collision.</li> </ul> Variable Name Possible Values Description name str Name of the entity. id int Type of the entity. Max Value: <code>4095</code> variant int Variant of the entity. The maximum value is <code>4095</code>. If you leave this blank, then the game will automatically chose the next available number. However, the first available number is commonly <code>0</code>, so this is not recommended as it may cause issues. subtype int SubType of the entity. The maximum value is <code>255</code>. (The reason for this is that the hash map generator of the .stb format expects a specific bit-depth.) anm2path string Path to the <code>.anm2</code> file, relative to the given anm2root. Example: <code>001.000_Player.anm2</code> baseHP int Base number of hit points the entity starts with. Usually only relevant for enemies, but can be used on other entities. collisionDamage float Amount of damage the player will take when colliding with this entity. 1 = a half heart. collisionMass float The weight of the entity to determine how far it is pushed when another entity collides against it. The higher the number, the heavier they are. collisionRadius float Radius of the collision circle. This value is used for both entity &lt;--&gt; entity and entity &lt;--&gt; grid collisions. This changes the <code>Entity.Size</code> field. collisionRadiusXMulti float Multiplier for the X direction of the collision circle. This can be used to grant an entity an elliptical hitbox. collisionRadiusYMulti float Multiplier for the Y direction of the collision circle. This can be used to grant an entity an elliptical hitbox. collisionInterval int Number of game ticks between checks for collision. Default = <code>1</code>. numGridCollisionPoints int Number of points along the edge of the collision circle, which are used to detect collisions with grid entities. friction float Slipperiness of the entity. Default = <code>1</code>. Higher values make them slide more, similar as they would standing on ice. Slower values make them slide less. A value of <code>0</code> makes them unable to move. shadowSize float The radius of the shadow underneath the entity. tags string A space-separated list of tags which determine certain properties and behaviors. See more here. gridCollision string Determines how the entity collides with grid objects such as rocks and pots. Note that Effect entities (id &gt;999) never have grid collision. Possible values: ['none', 'nopits', 'ground', 'walls', 'floor']. gibAmount int The amount of gibs the entity will drop upon death. Used for dip familiars. The main method of applying gibs and its amount is used with the gibs tag gibFlags string Used values: ['poop']. Used for dip familiars.  REPENTOGON-only <code>entity</code> tag variables Variable Name Possible Values Description coinvalue int How much this coin pickup is worth when using GetCoinValue (either by the game or a lua call). customtags string Space-separated list of tags added by REPENTOGON which determine certain properties and behaviors. See CustomTags section on the REPENTOGON Docs. nosplit boolean Allows preventing this NPC from being split by Meat Cleaver. <p>Below is the very first entry inside the vanilla <code>entities2.xml</code> file, defining the player. You can use this as an example, but do not actually define new player entities yourself. <pre><code>&lt;entities anm2root=\"gfx/\" version=\"5\"&gt;\n    &lt;entity anm2path=\"001.000_Player.anm2\" baseHP=\"10\" boss=\"0\" champion=\"0\" collisionDamage=\"0\" collisionMass=\"5\" collisionRadius=\"10\" friction=\"1\" id=\"1\" name=\"Player\" numGridCollisionPoints=\"40\" shadowSize=\"16\" stageHP=\"0\" variant=\"0\"&gt;\n        &lt;gibs amount=\"0\" blood=\"0\" bone=\"0\" eye=\"0\" gut=\"0\" large=\"0\"/&gt;\n    &lt;/entity&gt;\n&lt;/entities&gt;\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#what-to-set-for-idvariantsubtype","title":"What to set for <code>id</code>/<code>variant</code>/<code>subtype</code>","text":"<p>Firstly, the <code>id</code>, or \"type\" of the enemy, should be set anywhere from 1 to 1000. Depending on the type of entitiy you're creating, you will want to refer to the EntityType enum.</p> <ul> <li>IDs 1-9 are for specific, unique entity types, such as the player and projectiles.</li> <li>IDs 10-999 are for enemies.</li> <li>ID 1000 is custom effects.</li> <li>IDs above 1000 will be defined as effects, but may cause issues for not being the standard ID of 1000. More information can be found later below.</li> </ul> <p><code>variant</code> and <code>subtype</code> are for defining different types of the same entity, which have differing rules dependent on what vanilla entries already exist.</p> Variant auto-filling <p>Due to a bug, allowing the variant to auto-fill for Effect entities can have it use the variant for the \"star flash\" effect. This will cause unexpected behavior for your effect, and can make it not show up or be removed after a short period of time.</p> <p>If an entity already has a defined <code>variant</code> and you use that <code>variant</code>, your entity may take on some of the properties of that entity <code>variant</code>. For custom variants, simply define a number not taken up by existing vanilla entries.</p> <p><code>subtype</code> should always be a number not taken up by existing vanilla entries.</p> Type overflowing <p>There is a maximum value you can set for <code>id</code>, <code>variant</code>, and <code>subtype</code>:</p> <ul> <li><code>id</code> is capped at <code>4095</code>.</li> <li><code>variant</code> is capped at <code>4095</code>.</li> <li><code>subtype</code> is capped at <code>255</code>. </li> </ul> <p>The values can technically be set higher than these caps, but the game internally condenses all 3 values into a 32-bit integer with a limited amount of space per variable. Amounts higher than the intended cap can cause an overflow to occur, which can cause your entity to start behaving as a different entity if the condensed number lines up with something else. If the condensed value is over the 32-bit integer limit, anything outside those bounds will be lost.</p> <p>Generally speaking, <code>subtype</code> is safer to allow to overflow, and the vanilla game itself does this for certain enemies. For example, the Ball and Chain enemy uses its subtype as a bitfield for configuration in Basement Renovator. It can still cause issues though, and neither <code>id</code> or <code>variant</code> should ever go over 4095.</p> <p>This entity entry defines a new tear variant by having its <code>id</code> set to <code>2</code>. It starts from variant <code>39</code>, as the last defined vanilla tear variant is <code>38</code>. <pre><code>&lt;entity anm2path=\"my_new_tear_variant.anm2\" collisionMass=\"8\" collisionRadius=\"7\" friction=\"1\" id=\"2\" name=\"My New Tear\" numGridCollisionPoints=\"8\" shadowSize=\"8\" variant=\"39\" /&gt;\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#fetching-the-idvariantsubtype-of-your-entity-with-lua","title":"Fetching the ID/variant/subtype of your entity with Lua","text":"<p>Your defined <code>id</code>/<code>variant</code> combination may overlap with other mods that happen to define the exact same combination. The game may assign new variants or new subtypes to compensate for the overlap. As such, it is good practice to fetch them with the following functions instead of directly using the numbers you provided:</p> <ul> <li>Isaac.GetEntityTypeByName</li> <li>Isaac.GetEntityVariantByName</li> <li> Isaac.GetEntitySubTypeByName</li> </ul> <p>For <code>subtype</code>, you must either note down the subtype manually, or use REPENTOGON.</p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#tags-explanation","title":"Tags explanation","text":"<p>The <code>tag</code> variable is used to define specific behavior for the entity that varies depending on the tag. You can define one or more tags from the list below:</p> Tag-Name Suffix cansacrifice Marks familiars that Sacrificial Altar can be used on. nodelirium Blacklists a boss from being used by Delirium. fly Indicates enemies which should be neutralized by Skatole. Does not affect Beelzebub. spider Indicates enemies which should be neutralized by Bursting Sack. ghost Indicates enemies which Vade Retro can kill at &lt;50% HP. noreroll Immunity to Ace cards that turn enemies into pickups. If a <code>devolve</code> tag is defined on the enemy, will prevent rerolls from D10 wisps. brimstone_soul Friendly Ball wisps created by this enemy will fire Brimstone lasers. explosive_soul Friendly Ball wisps created by this enemy will fire explosive tears. homing_soul Friendly Ball wisps created by this enemy will fire homing tears. devilsacrifice Repentance+ exclusive tag that allows your item to be paid for with damage instead of heart containers.","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#entity-child-tags","title":"<code>entity</code> child tags","text":"<p>The <code>entity</code> tag has numerous child tags to help define additional information about the entity. Only a few are mentioned here, while the others are explained in Creating enemies.</p>","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#gibs-tag","title":"<code>gibs</code> tag","text":"<p>The <code>gibs</code> tag is used to define the gibs that are spawned when an entity is killed or destroyed. The entity will spawn an amount of gibs based on the <code>amount</code> variable and randomly select between one of the other gib variables that are set to <code>1</code>. The default for the other gib variables is 0 (disabled).</p> Variable Name Possible Values Description amount int How many gibs should be spawned. blood int Red meat/muscle particles. bone int Bone particles. chain int Chain gibs. Only used by The Visage in vanilla. colorblood int Colors blood particles to be colored by the entity's SplatColor. dust int Dust particles. eye int Small eyeball particles. gut int Gut particles (e.g. intestines). huge int Used by the Ultra Horsemen. Causes the screen to shake when the entity is killed and plays a meatier death sound. large int Plays a meatier death sound. poop int Poop particles. rock int Small rock particles.","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/entity_basics/#preload-and-preload-snd-tags","title":"<code>preload</code> and <code>preload-snd</code> tags","text":"<p>Both of these tags are old remnants of Isaac's code for preloading other entities or sounds when the entity is spawned for smoother loading times when it is spawned/played later by said entity. <code>preload-snd</code> serves no purpose for the PC version of Isaac as all sounds in the game are preloaded when the game launches. It is not known if <code>preload</code> has any useful applications.</p> <code>preload</code> tag variables Variable Name Possible Values Description name str Name of the entity. id int Id/type of the entity. variant int Variant of the entity. subtype int SubType of the entity. <code>preload-snd</code> tag variables Variable Name Possible Values Description id int ID of the sound effect.","tags":["Tutorial","Beginner friendly","Video","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/item_pools/","title":"Item pools","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Item Pools are the primary method of finding and obtaining your custom collectibles within a run.</p>","tags":["Tutorial","Beginner friendly","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/item_pools/#video-tutorial","title":"Video tutorial","text":"<p>(This tutorial covers both Item Pools and Active Items) </p>","tags":["Tutorial","Beginner friendly","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/item_pools/#itempoolsxml","title":"itempools.xml","text":"<p>Once you have items defined in an <code>items.xml</code> file within your mod's <code>content</code> folder, you will need to create an itempools.xml file in the same folder in order to add your collectibles into various item pools.</p> <pre><code>&lt;ItemPools&gt;\n    &lt;Pool Name=\"treasure\"&gt;\n        &lt;Item Name=\"My Item\" Weight=\"1\" DecreaseBy=\"1\" RemoveOn=\"0.1\"/&gt;\n    &lt;/Pool&gt;\n&lt;/ItemPools&gt;\n</code></pre> <p>For every XML file, there is a \"root tag\" that goes from the start of the file to the end of the file, and multiple \"child tags\" that act as the individual entries. In this instance, <code>itempools.xml</code> entries will start with <code>&lt;ItemPools&gt;</code> and end with <code>&lt;/ItemPools&gt;</code>. Individual item pool entries start and end with the <code>Pool</code> tag, and collectibles within those pools use the <code>Item</code> tag. Below are explanations of each variable contained within each of these tags.</p> <p>The <code>ItemPools</code> tag does not contain any variables.</p> <p>The <code>Pool</code> tag only requires one variable: <code>Name</code>. It is used to define the item pool the items will be added to.</p> <code>Item</code> tag variables Variable Name Possible Values Description Id int (Optional) The id of the item in the itempool When using this variable, you can't use the \"name\" variable. Name String (Optional, recommended) The name of the item in the itempool. When using this variable, you can't use the \"id\" variable. Weight float Relative \"likelyhood\" that this item can be drawn from the pool. Default is <code>1</code>. If this value reaches the \"RemoveOn\" value, the item will no longer be drawn from the pool. DecreaseBy float Value on how often the item can be drawn from the pool. Default is <code>1</code>Everytime an item is drawn from the pool, this value is substracted from its <code>Weight</code>. This makes the item appear less likely on reroll until the weight reaches the <code>RemoveOn</code> value. RemoveOn float If the <code>Weight</code> value reaches this, the item is no longer able to be drawn from the pool. Default is <code>0.1</code>.","tags":["Tutorial","Beginner friendly","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/item_pools/#available-pools","title":"Available pools","text":"<p>There is a pre-defined list of item pools you can add your items to. You cannot define your own custom item pools without the use of   REPENTOGON. Below is the list of item pool names you can define to add your items to:</p> Item pool names Variable Name Description treasure Treasure Room Pool for Normal/Hard Mode shop Shop Pool for Normal/Hard Mode boss Boss Room Pool for Normal/Hard Mode devil Devil Deal Pool for Normal/Hard Mode angel Angel Room Pool for Normal/Hard Mode secret Secret Room Pool for Normal/Hard Mode library Library Pool for Normal/Hard Mode shellGame Exclusive Bag of Crafting Item Pool for all modes goldenChest Golden Chest Pool for all modes redChest Red Chest Pool for all modes beggar Beggar Pool for all modes demonBeggar Devil Beggar Pool for all modes curse Curse Room Pool for Normal/Hard Mode keyMaster Key Master Pool for all modes batteryBum Battery Bum Pool for all modes momsChest Mom's Chest Pool for the unique chest located in Home greedTreasure Treasure Room Pool for Greed/Greedier Mode greedBoss Boss Room Pool for Greed/Greedier Mode greedShop Shop Pool for Greed/Greedier Mode greedCurse Curse Room Pool for Greed/Greedier Mode greedDevil Devil Deal Pool for Greed/Greedier Mode greedAngel Angel Room Pool for Greed/Greedier Mode greedSecret Secret Room Pool for Greed/Greedier Mode craneGame Crane Game Pool for all modes ultraSecret Ultra Secret Room Pool for Normal/Hard Mode bombBum Bomb Bum Pool for all modes planetarium Planetarium Pool for Normal/Hard Mode oldChest Old Chest Pool for the chest spawned by the Isaac's Tomb collectible babyShop Baby Shop Pool for shop items while holding the Adoption Papers trinket woodenChest Wooden Chest Pool for all modes rottenBeggar Rotten Beggar Pool for all modes","tags":["Tutorial","Beginner friendly","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/item_pools/#custom-item-pools","title":"Custom Item Pools","text":"<p>With REPENTOGON, you can insert any <code>Name</code> you wish to register a new item pool. You can list your items as per usual, and can use <code>Id</code> instead of <code>Name</code> for item entries in order to add vanilla items to your custom pool.</p> <p>You can fetch the unique ID of your item pool with Lua using Isaac.GetItemPoolIdByName. From there, you can treat it like you would any other item pool ID for fetching collectibles.</p>","tags":["Tutorial","Beginner friendly","No Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/crash_course/passive_item/","title":"Passive items","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>Items are an integral part of the gameplay of The Binding of Isaac. This tutorial covers how to create passive items.</p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/passive_item/#video-tutorial","title":"Video tutorial","text":"","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/passive_item/#creating-your-item","title":"Creating your item","text":"<p>Creating an item is relatively simple. You need only an <code>items.xml</code> file and an entry for your item within it.</p> <pre><code>&lt;items gfxroot=\"gfx/items/\" version=\"1\"&gt;\n    &lt;passive id=\"1\" name=\"Damage Potion\" gfx=\"damage_potion_item.png\" description=\"It smells like ashes and anger\" quality=\"1\" cache=\"damage\" /&gt;\n&lt;/items&gt;\n</code></pre> <p>For every XML file, there is a tag that goes from the start of the file to the end of the file, and multiple \"child tags\" that act as the individual entries. In this instance, items.xml entries will start with <code>&lt;items&gt;</code> and end with <code>&lt;/items&gt;</code>, while individual item entries have multiple different options depending on the type of item you're creating. The available tag types are <code>passive</code>, <code>active</code>, <code>familiar</code>, and <code>trinket</code>. For the purposes of this tutorial, we will be covering the use of <code>passive</code>.</p> Root <code>items</code> tag variables Note <p>The variables in the items tag can be changed, but should never be removed.</p> Variable Name Possible Values Description gfxroot string Root path of all item sprites, set to <code>gfx/items/</code> by default. The game will automatically use the appropriate subdirectory at this location based on the type of item it is. Passive and active items will be located in the <code>collectibles</code> folder (ex: <code>gfx/items/collectibles/</code>). Used with the <code>gfx</code> variable. version int The version of the <code>items.xml</code> format. This must always stay equal to 1. deathanm2 string Optional. Root path of the anm2 file used for the miniature sketch sprites (sometimes known as \"death portraits\") of the item seen in Isaac's Last Will, the Collection Page on the main menu, and on the pause menu. Items without a death portrait will be represented with a question mark inside of a box. <code>passive</code> tag variables Note <p>Only a <code>name</code> is required to create an item, but all items should be created with a <code>description</code>, <code>gfx</code>, and <code>quality</code>.</p> Variable Name Possible Values Description id int Used for associating costumes and death portrait/collection page sprites with an item. cache string The game keeps track of Isaac's stats with a cache so that they don't need to be recalculated constantly. Put in names for different caches with a space between to tell the game to trigger a re-evaluation for those caches when this item is collected or lost. Possible values: [firedelay, damage, speed, range, tearcolor, tearflag, color, size, shotspeed, all, luck, flying, weapon, familiars]. name string Name of the item. Also used as an identifier for your item. description string Description of the item as it appears when collected by Isaac. gfx string Path to the item image. Must be a .png saved at a bit-depth of 32 bits. tags string Tags that are used to flag items with certain properties or categories. Multiple tags must be separated with a space; see here for possible values and descriptions. bombs int Number of added bombs upon pickup. keys int Number of added keys upon pickup. coins int Number of added coins upon pickup. hearts int Number of added red hearts upon pickup. Will fill heart containers, not grant them (1 = half heart). soulhearts int Number of added soul hearts upon pickup (1 = half soul heart). blackhearts int Number of added black hearts upon pickup (1 = half black heart). maxhearts int Number of added empty heart containers upon pickup (1 = heart container, half heart containers can only be filled halfway). cooldown int Number of frames until this item's associated <code>CollectibleEffect</code> is auto-removed if granted. CollectibleEffects are automatically granted by active items on use. special bool Retired mechanic since Repentance. Used to mark the item as \"special\", which would have a chance of being rerolled if you saw another special item earlier in the run. devilprice int Full heart container cost of the item to purchase in a devil deal. Possible values: [\"1\", \"2\"] shopprice int Cent cost of the item to purchase in a shop. addcostumeonpickup bool True if your item adds a costume upon pickup. This is set automatically if you attach a costume to your item. persistent bool Determines whether the item's associated CollectibleEffect is retained when transitioning between rooms, or across save &amp; continue. CollectibleEffects are automatically granted by active items on use. <code>false</code> by default. achievement int Vanilla achievement id to lock the item behind. quality int Quality is a mechanic used by a few items and Tainted Lost's item filter. The \"strongest\" items in this game are generally around quality 3 or 4, while the \"weaker\" ones are around 0, 1, or 2, although how \"powerful\" your item should be considered is subjective to the mod developer. This should be within 0 to 4 in order to work with Repentance+'s Abyss changes, but can technically go to 5 and above. craftquality int Bag of Crafting uses its own version of item quality in order to decide what item it should give Isaac. A value of -1 prevents this item from appearing in Bag of Crafting. hidden bool Prevents the item from appearing in the Death Certificate dimension, or on the collection menu. cleareffectsonremove bool Clears any effects of the item upon removal. Note: This is currently not used by any vanilla item. <p>  REPENTOGON adds its own set of <code>item</code> tag variables.</p>  REPENTOGON-exclusive <code>item</code> tag variables Variable Name Possible Values Description achievement int or string Ties the item/trinket to be unlocked by an achievement, but now allows modded achievements. For modded achievements, use the corresponding <code>name</code> xml attribute value. customtags string Defines an arbitrary tag, or set of tags, that can be used in a similar fashion to the vanilla game's item tags. Explanation on how to use them can be found here.","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/passive_item/#obtaining-your-item-through-the-debug-console","title":"Obtaining your item through the debug console","text":"<p>Your item now exists in the game, but is unobtainable through any legitimate means. You must give yourself the item through the debug console, either by granting it to Isaac directly or spawning a pedestal. We will cover how to do both methods.</p>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/passive_item/#non-repentogon","title":"Non-REPENTOGON","text":"<p>The debug console is not enabled by default without REPENTOGON.</p> <ol> <li>Open the debug console. It can be opened with the tilde (~) key, though this may differ depending on your keyboard's language and layout. If it's not enabled, you can navigate to <code>Documents/My Games/Binding of Isaac Repentance</code> (or <code>Binding of Isaac Repentance+</code> for Repentance+ users) and open \"options.ini\". Find <code>EnableDebugConsole</code> and change the 0 to 1 to enable the console. Remember to save the file afterwards. You'll need to restart the game for the changes to take effect. </li> <li>With the debug console open, type <code>g</code> or <code>giveitem</code> followed by a space, then the name of your item. All collectibles in the console start with the letter <code>c</code>, followed by their internal ID number, then their name. Once it appears as the first option in the list, hit ENTER. Hitting ENTER again or ESC will close the debug console. Isaac should now have your new item. </li> <li>For spawning the item, note the internal ID number from earlier. Open the console again and type the command <code>spawn 5.100.</code> followed by the ID number. The collectible should spawn. </li> <li>As an additional note, if there is ever a case where you cannot give yourself the item via name due to the names of other items taking priority, you can type out <code>g c</code> followed by the the ID number as a reliable alternative. </li> </ol>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/passive_item/#repentogon","title":"REPENTOGON","text":"<p>With REPENTOGON, the debug console is automatically enabled and more convenient to use.</p> <ol> <li>Open the debug console. It can be opened with the tilde (~) key. The debug console window will pop up.</li> <li>Select the text box, type <code>g</code> or <code>giveitem</code> followed by a space, then the name of your item. Hit TAB or select the autofill entry, then hit ENTER. Hitting ENTER again or ESC will close the debug console. Isaac should now have your new item. </li> <li>For spawning the item, the process is the exact same, except start the command with <code>spawn</code> instead of <code>g</code>. </li> </ol>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/passive_item/#coding-your-item-lua-with-lua","title":"Coding your item Lua with Lua","text":"<p>There are lots of capabilities with a passive item that cannot be accomplished in the <code>items.xml</code> entry. This will require Lua. Although how to use Lua will not be covered here, below is a small snippet of code as an example of how to only execute code if Isaac has your item.</p> <pre><code>--Requirement to use any Lua callbacks.\nlocal mod = RegisterMod(\"My Mod\", 1)\n\n--As the internal ID of modded items are not consistent, this will fetch the ID for you.\nlocal damagePotion = Isaac.GetItemIdByName(\"Damage Potion\")\n\n--Defines how much damage the item grants to Isaac. Stored here for easier access and a clear indicator as to what it's used for.\nlocal damagePotionDamage = 1\n\nfunction mod:EvaluateCache(player, cacheFlags)\n    --This is the most common way of checking if Isaac has a specific item.\n    if player:HasCollectible(damagePotion) then\n        --How many of your item Isaac has.\n        local itemCount = player:GetCollectibleNum(damagePotion)\n\n        --Multiplies the number of your item Isaac has with the damage up. This means multiple of your item will stack the damage bonus!\n        local damageToAdd = damagePotionDamage * itemCount\n\n        --Adding the damage to Isaac\n        player.Damage = player.Damage + damageToAdd\n    end\nend\n\n--MC_EVALUATE_CACHE will evaluate the stats of the player, taking place AFTER all vanilla items.\n--This passes the player whose stats are being evaluated, and the CacheFlag, defining which stat is being evaluated.\n--The extra \"CacheFlag.CACHE_DAMAGE\" on this specific callback ensures that this code will ONLY run when evaluating damage.\nmod:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, mod.EvaluateCache, CacheFlag.CACHE_DAMAGE)\n</code></pre> <p>For the above example to work, make sure you have added <code>damage</code> to the <code>cache</code> attribute in your item's <code>items.xml</code> entry (ex: <code>cache=\"damage\"</code>).</p> <p>Below is a list of links to helpful pages with more information on some of the code used in this snippet:</p> <ul> <li>MC_EVALUATE_CACHE</li> <li>CacheFlag</li> <li>HasCollectible</li> <li>GetCollectibleNum</li> </ul>","tags":["Tutorial","Beginner friendly","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/sound_effects/","title":"Sounds","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>While the game has a massive catalog of sound effects to use, custom sound effects can be vital for adding the necessary feedback to actions and events.</p>","tags":["Tutorial","Beginner friendly","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/sound_effects/#video-tutorial","title":"Video tutorial","text":"<p>(This tutorial covers both sounds and music) </p>","tags":["Tutorial","Beginner friendly","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/sound_effects/#vanilla-sounds","title":"Vanilla sounds","text":"<p>Isaac has a massive catalog of over 1000 sound effects as of Repentance+. All sounds have a numerical id, with the ids for vanilla sounds being found under the <code>SoundEffect</code> enumerator. The docs page for this enumerator also allows you to quickly preview any sound. Sounds tend to be the largest contributor to file size in a mod, so make sure to look through the list of vanilla sounds before implementing your own.</p>","tags":["Tutorial","Beginner friendly","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/sound_effects/#encoding-custom-sounds","title":"Encoding custom sounds","text":"<p>Before you add your sound to the game using XML, it's very important to ensure it is encoded correctly. The game expects all sounds to be in <code>.wav</code> format and encoded in 16-bit. Any sound that is incorrectly encoded will instead be a very loud, high-pitched static noise! There is no restriction on bitrate or audio channel options.</p> <p>There are many ways to encode a sound effect with the proper configuration:</p> <ul> <li>Audacity is a free, open-source program with a suite of audio editing tools. It includes an option to export sound files in <code>.wav</code> format. You can choose the \"Signed 16-bit PCM\" encoding format during the export process for use in Isaac.</li> <li>For an online alternative, convertio.co lets you convert <code>.mp3</code> files to <code>.wav</code> with a multitude of codecs. You can choose \"PCM_S16LE (Uncompressed)\" from this list to encode sounds for use in Isaac.</li> </ul>","tags":["Tutorial","Beginner friendly","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/sound_effects/#adding-custom-sounds","title":"Adding custom sounds","text":"<p>All custom sound effects are defined in a <code>sounds.xml</code> file, located in the <code>content</code> folder at the root of your mod folder. In this folder, there must be a root <code>sounds</code> tag. This tag has a <code>root</code> property, which should point to the root directory of where your sound effects are stored starting from your mod's <code>resources</code> folder, usually just <code>sfx</code>.</p> <pre><code>&lt;sounds root=\"sfx/\"&gt;\n\n&lt;/sounds&gt;\n</code></pre> <p>When defining a new sound, you use a <code>sound</code> tag with a <code>name</code> property declaring the name for your sound. You'll use the sound's name to grab its id later.</p> <p>Within a <code>sound</code> tag must be at least one <code>sample</code> tag, although there can be as many as desired. Samples are individual audio files to play when your sound is played. If multiple samples are provided, then the game will choose a random one from the list to play. Samples have a <code>weight</code> attribute that is required but never used by the game. Every sound in vanilla has this set to \"1\".</p> <pre><code>&lt;sounds root=\"sfx/\"&gt;\n    &lt;sound name=\"New Sound\"&gt;\n        &lt;sample weight=\"1\" path=\"my_sound_effect.wav\" /&gt;\n    &lt;/sound&gt;\n\n    &lt;!-- Chooses one sample at random to play when sound is played --&gt;\n    &lt;sound name=\"New Sound 2\"&gt;\n        &lt;sample weight=\"1\" path=\"my_other_effect1.wav\" /&gt;\n        &lt;sample weight=\"1\" path=\"my_other_effect2.wav\" /&gt;\n        &lt;sample weight=\"1\" path=\"my_other_effect3.wav\" /&gt;\n    &lt;/sound&gt;\n&lt;/sounds&gt;\n</code></pre>","tags":["Tutorial","Beginner friendly","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/sound_effects/#playing-sounds-with-lua","title":"Playing sounds with Lua","text":"<p>To play sounds, you'll need to use the <code>SFXManager</code> object, which you can instantiate with <code>SFXManager()</code>. Then use the <code>Play</code> function.</p> <pre><code>local sfxManager = SFXManager()\n\nsfxManager:Play(SoundEffect.SOUND_1UP) -- Id of 1\n</code></pre> <p>To play a custom sound, first get its id with <code>Isaac.GetSoundIdByName</code>.</p> <pre><code>local sfxManager = SFXManager()\nlocal soundId = Isaac.GetSoundIdByName(\"New Sound\")\n\nsfxManager:Play(soundId)\n</code></pre> <p>Lastly, you can use the optional arguments of <code>Play</code> for more control over how the sound is played. The arguments are in the following order:</p> <ol> <li><code>integer</code> Sound id: The only required argument, this is id number of the sound.</li> <li><code>float</code> Volume: A multiplier determining how loud the sound is. Default is 1.</li> <li><code>int</code> FrameDelay: The global \"cooldown\" before the sound can be played again, in game ticks (30 ticks per second). Default is 2, meaning the sound cannot be played again for 2 game ticks.</li> <li><code>boolean</code> Loop: Determines if the sound is looped after its finished playing. Default is <code>false</code>.</li> <li><code>float</code> Pitch: A multiplier determining the pitch of the sound, or how high or low it is. Default is 1.</li> <li><code>float</code> Pan: A multiplier determining the pan of the sound, or how far to the left or right the sound plays in the player's speakers or headphones, with -1 being fully to the left and 1 being fully to the right. This is only respected when the <code>.wav</code> file played only has a single audio track (no non-mono audio files). Default is 0, which makes it play in the middle. </li> </ol> <pre><code>local sfxManager = SFXManager()\nlocal soundId = Isaac.GetSoundIdByName(\"New Sound\")\n\n-- All of these are the default values besides the first argument.\nsfxManager:Play(\n    soundId, -- Sound id (required)\n    1,       -- Volume\n    2,       -- Frame delay\n    false,   -- Loop\n    1,       -- Pitch\n    0        -- Pan\n)\n</code></pre>","tags":["Tutorial","Beginner friendly","XML","Repentance","Repentance+"]},{"location":"tutorials/crash_course/uploading_a_mod/","title":"Uploading a mod","text":"Crash course table of contents <p>The crash course is still a work in progress!</p> <ol> <li>Creating a mod.<ol> <li>Creating the mod.</li> <li>Uploading a mod.</li> </ol> </li> <li>Creating a passive item.</li> <li>Creating an active item.</li> <li>Adding to item pools.</li> <li>Making costumes.</li> <li>Making a new character.</li> <li>Creating entities.<ol> <li>Entity basics.</li> <li>Creating effects.</li> <li>Creating enemies.</li> <li>Creating a familiar.</li> </ol> </li> <li>Adding sounds.</li> <li>Adding music.</li> <li>Making pocket items.<ol> <li>Creating custom cards, runes, and objects.</li> <li>Creating custom pills.</li> </ol> </li> <li>Creating challenges.</li> <li>Structuring your mod.</li> <li>Conclusion.</li> </ol> <p>To upload to the Steam Workshop, you must use the mod uploader tool bundled in with the game files.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/uploading_a_mod/#video-tutorial","title":"Video tutorial","text":"","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/uploading_a_mod/#using-the-mod-uploader","title":"Using the mod uploader","text":"<p>The mod uploader is a program located in the <code>tools</code> folder in the game's directory. If you don't see this folder, make sure you've extracted the game's resources by following the previous tutorial in the crash course. Within the <code>tools</code> folder, you'll see <code>ModUploader.exe</code>, which is the executable you'll need to launch. The program launched will be titled \"The Binding of Isaac: Afterbirth+ Mod Uploader\", but this uploader is still functional for Repentance and Repentance+.</p> <p></p> Linux info <p>Linux users may notice a \"Linux\" folder with a file you can run in the terminal. If you're having issues with this version of the mod uploader, try adding the Windows version as an non-Steam game on Steam, then run it with Proton.</p> <ol> <li>Click the plus (+) at the bottom-left of the Steam app, then click \"Add a Non-Steam Game\".</li> <li>Click \"Browse\" at the bottom-left of the menu that popped up, and navigate to <code>ModUploader.exe</code>. Choose it and click \"Add Selected Programs\".</li> <li>You should now be able to find \"ModUploader\" in your Steam library. With the ModUploader entry selected, click the gear on the right, then click \"Properties\".</li> <li>Click \"Compatibility\" on the left, then click \"Force use of a specific Steam Play compatibility tool\". From this dropdown list, choose \"Proton 9.0-4\".</li> <li>You should be able to launch the mod uploader through Steam and use it normally.</li> </ol> <p>To get started, navigate to your mod folder after clicking \"Choose Mod...\", then select your <code>metadata.xml</code>. This file was generated when launching the game with your mod in your mods folder.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/uploading_a_mod/#editing-your-mods-metadata","title":"Editing your mod's metadata","text":"<p>Within the mod uploader, you can edit your mod's metadata, which is the data that shows on the Steam Workshop.</p> <p></p> <ul> <li>1: This area holds the \"Upload Mod\" and \"View Mod\" buttons. \"Upload Mod\" will upload it to the Steam Workshop with all of your settings, while \"View Mod\" let's you open the Workshop page in your browser.</li> <li>2: This allows you to edit the change notes for your release. You can edit this field for both uploads and updates.</li> <li>3: This holds information about the name of the mod, the version (how many updates the mod has had, also editable in the <code>metadata.xml</code>), and which tags to apply to the Workshop page.<ul> <li>If you upload the mod with a version that is not higher than the previous upload, the mod won't properly update for people.</li> <li>Version is automatically incremented and doesn't appear on the Workshop page or in game.</li> <li>Tags are not editable on the Workshop page.</li> </ul> </li> <li>4: This is the mod's thumbnail. Clicking \"Change\" allows you to change it to any image. This is blanked out every time you open the mod uploader, but you do not need to reselect your mod's thumbnail whenever updating the mod.<ul> <li>Note: For Windows users, File Explorer will only let you choose png, jpeg, and bmp files. Despite this, it's common to see gif thumbnails on the Workshop. You can work around the limitation and upload a gif as the thumbnail by typing an asterisk (*) into the file name bar at the bottom and pressing enter, which allows you to select any file type.</li> <li>Your mod's thumbnail is not editable on the Workshop page.</li> </ul> </li> <li>5: You can set the visibility of your mod to Public, Friends Only, or Private.</li> <li>6: The mod description supports Steam's version of BBCode, allowing you to add headers, hyperlinks, bolded text, and more. You can learn how to format your description by clicking here.</li> <li>7: This is the mod uploader log, informing you of any errors in the uploading process.</li> </ul> Error guide Note <p>Users who own the game through family sharing cannot upload mods, and will either receive error 2 or 9.</p> Error Name Solution Error (2) - Unknown error Delete your mod's <code>metadata.xml</code> file and allow the game to generate a new one. Make sure to copy whatever information you entered during the uploading process! Error (8) - Incorrect parameter Shorten your description to be under 8000 characters. If it's already under that count, try reselecting the <code>metadata.xml</code> file. Error (9) - File not found Delete your mod's <code>metadata.xml</code> file and allow the game to generate a new one. Make sure to copy whatever information you entered during the uploading process! Error (15) - Access is denied Delete your mod's <code>metadata.xml</code> file and allow the game to generate a new one. Make sure to copy whatever information you entered during the uploading process! Error (21) - User is not logged in You're likely having internet issues. Check your connection and try again. Error (25) - Limit exceeded Your thumbnail is too large. Thumbnails should be under a megabyte (1mb). <p>You cannot edit the name of your mod in the mod uploader unlike all of the other properties, so make sure you manually edit it in the <code>metadata.xml</code> before uploading.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/crash_course/uploading_a_mod/#updating-your-mod","title":"Updating your mod","text":"<p>Updating your mod follows the same process as uploading it, meaning you can select your <code>metadata.xml</code> and click \"Upload Mod\" like normal. When your mod is uploaded for the first time, an <code>id</code> tag is added in your mod's <code>metadata.xml</code> that tells the game what Steam Workshop mod it is for. Only those set as contributors of the mod on Steam can update it.</p>","tags":["Tutorial","Beginner friendly","No Lua","Video","Repentance","Repentance+"]},{"location":"tutorials/entities/dirt_color/","title":"Dirt color","text":"<p>Dirt color is the the system which enables a layer in an enemy's <code>.anm2</code> to be colored differenlty depending on the color of the ground under it. This is how enemies like Nightcrawlers are able to blend in with the environment. Dirt color is only configured to work automatically for EntityNPCs and EntityFamiliars. This tutorial will focus on an enemy, but the process is the exact same for familiars.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/entities/dirt_color/#making-a-dirt-layer","title":"Making a dirt layer","text":"<p>In the <code>.anm2</code> of your enemy, create a layer named <code>dirt</code>. This layer should have the part of your spritesheet that should be colored depending on the environment. Make sure that the pixels you want to be differenly colored are different shades of gray, with the lightness depending on how dark you want the color to be.</p> <p></p> <p>As long as the layer is named <code>dirt</code>, it will automatically be updated.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/entities/dirt_color/#manually-grabbing-dirt-color","title":"Manually grabbing dirt color","text":"<p>Sometimes, you want to grab the dirt color at a certain position so that you can use it yourself, instead of having it apply automatically to an NPC. There is no built-in functionality to do this, but one hack you can do is spawn the <code>DIRT_PILE (146)</code> EntityEffect and store its <code>Color</code> property, as this effect is hardcoded to automatically change its color to the dirt color of the position it was spawned in.</p> <pre><code>-- Use the dirt effect to get the dirt color of a certain position.\nlocal position = Vector(250, 150)\nlocal dirt = Isaac.Spawn(EntityType.ENTITY_EFFECT, EffectVariant.DIRT_PILE, 0, position, Vector.Zero, nil)\ndirt:Update() -- Update the color\nlocal dirtColor = dirt:GetSprite().Color\ndirt:Remove() -- Remove the pile on the same frame\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/entities/light_layer/","title":"Light layer","text":"<p>Certain entities make light in the darkness. This is most visible in Mines dark rooms, and with Curse of Darkness. The way this is done is with a null layer in the <code>.anm2</code> of your Entity.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/entities/light_layer/#creating-a-light-layer","title":"Creating a light layer","text":"<p>To create a light layer in an entity's <code>.anm2</code>, create a new layer. Make sure you tick the \"Null\" box, and make sure that the layer name starts with an asterisk (<code>*</code>).</p> <p></p> <ul> <li>Edit the <code>Scale X</code> and <code>Scale Y</code> properties to change the size of the light.</li> <li>Edit the <code>R</code>, <code>G</code>, and <code>B</code> properties under <code>Tint RGB</code> to edit the color the light.</li> <li>Edit the <code>Tint Alpha</code> property to edit the brightness of the light.</li> </ul> <p></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/entities/taking_damage/","title":"Taking damage","text":"<p>The <code>MC_ENTITY_TAKE_DMG</code> callback has a number of useful applications for scenarios involving taking damage, namely as the player.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#callback-breakdown","title":"Callback breakdown","text":"<p>MC_ENTITY_TAKE_DMG triggers when an entity takes damage, but before the damage is subtracted from the entity's health. It has 5 parameters, an optional argument, and a return type.</p> <p>Parameters</p> <ul> <li><code>ent</code> (Entity): The entity taking damage.</li> <li><code>amount</code> (<code>integer</code>): If the player took damage, represents how many half-hearts of damage they're taking. If an enemy, it will return a <code>float</code> for the exact amount of Hit Points to be subtracted from the enemy.</li> <li><code>flags</code> (DamageFlag): A bitflag containing extra information about the how the damage was dealt and how it should be handled.</li> <li><code>source</code> (EntityRef): The source of the damage. The entity that dealt the damage can be accessed through its <code>Entity</code> variable, but this may return <code>nil</code> such as if the damage came from spikes. In these instances, you can check the <code>Type</code> and <code>Variant</code> variables, where <code>Type</code> will be <code>0</code> and <code>Variant</code> will be the <code>GridEntityType</code>.</li> <li><code>countdown</code> (<code>integer</code>): Will initiate a \"damage countdown\" if not already active. Any damage sources that deal damage with the <code>DamageFlag.DAMAGE_COUNTDOWN</code> flag, such as The Nail, Gamekid, and My Little Unicorn, will not deal damage while the countdown is active.</li> </ul> <p>Optional Argument</p> <p>The optional argument for this callback is <code>EntityType</code>. When specified, only entities with the matching type will trigger this callback.</p> <pre><code>mod:AddCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, mod.OnEntityTakeDmg, EntityType.ENTITY_PLAYER) --Only the player taking damage will trigger this callback\n</code></pre> <p>Return type</p> <p>You can return <code>false</code> to prevent the damage from from being taken by the entity. Returning any value will stop the remaining callbacks from triggering.</p> <p>With   REPENTOGON, the callback's return functionality has been given an upgrade. You may return a table instead of a boolean and include any of the following fields to modify them:</p> <ul> <li><code>Damage</code>: The amount of damage taken.</li> <li><code>DamageFlags</code>: The corresponding DamageFlags associated with the damage being taken.</li> <li><code>DamageCountdown</code>: The damage countdown set when the damage follows through.</li> </ul> <p>In addition, instead of cancelling the remaining callbacks, it will pass these modified values along to them.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#triggering-events-upon-isaac-taking-damage","title":"Triggering events upon Isaac taking damage","text":"<p>Although this seems relatively simple, doing this incorrectly can make the difference of whether your code activates just once or in excessive amounts in a short period of time.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#non-repentogon","title":"Non-REPENTOGON","text":"<p>The only damage callback available is <code>MC_ENTITY_TAKE_DMG</code>. Mods may cancel damage inside this callback, cancelling future callbacks for that particular damage instance from running. If the damage goes through, Isaac will typically initiate invincibility frames. If the damage is cancelled, there's nothing stopping the callback from triggering a second time as soon as possible. If your mod were to trigger an event upon taking damage, and a mod that runs after yours cancels the damage, your code would trigger every single frame. As such, it is important to utilize <code>AddPriorityCallback</code> for situations where no \"POST\" callback exists.</p> <p>AddPriorityCallback allows you to specify a CallbackPriority, meaning you can guarantee it will run earlier or later than other callbacks that don't specify one. Using <code>CallbackPriority.LATE</code> means it will run after most other callbacks, thus can safely be used to trigger events upon taking damage.</p> <pre><code>mod:AddPriorityCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, CallbackPriority.LATE, mod.OnEntityTakeDmg) --This will not run if a callback of default priority cancels the damage early\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#repentogon","title":"REPENTOGON","text":"<p>REPENTOGON adds <code>MC_POST_ENTITY_TAKE_DMG</code>, which has no return types but will only trigger after the damage has gone through fully, skipping the need for AddPriorityCallback.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#modifying-damage-taken","title":"Modifying damage taken","text":"<p>It's common to want to modify the flags of any damage being taken to enemies or players. This process is relatively straightfoward.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#non-repentogon_1","title":"Non-REPENTOGON","text":"<p>The only way to change information about the damage being dealt is to cancel it and deal damage a second time with Entity:TakeDamage. Note that dealing damage within <code>MC_ENTITY_TAKE_DMG</code> the callback would typically result in an infinite loop. To avoid this, you can add the <code>DAMAGE_CLONES</code> damage flag in the <code>TakeDamage</code> function and then check for it. This DamageFlag is specifically used for avoiding infinite loops.</p> <pre><code>function mod:OnEntityTakeDmg(ent, amount, flags, source, countdown)\n    --Check for if the flag exists with the bitwise and operator.\n    if ent:ToPlayer() and flags &amp; DamageFlag.DAMAGE_CLONES == 0 then\n        --Triggers MC_ENTITY_TAKE_DMG again with the same parameters, but reducing all damage taken to 1, like The Wafer.\n        --Make sure to add the DAMAGE_CLONES flag to the bitfield of flags.\n        player:TakeDamage(1, flags | DamageFlag.DAMAGE_CLONES, source, countdown)\n        --Cancel the original damage, otherwise we'd be stacking damage taken!\n        return false\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, mod.OnEntityTakeDmg, EntityType.ENTITY_PLAYER)\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#repentogon_1","title":"REPENTOGON","text":"<p>Referring back to the Return type section, you can return a table of values to modify attributes of the damage taken and it'll be passed along to the remaining callbacks.</p> <pre><code>--All enemies take half the amount of damage they would've normally taken.\n--This will be passed along to future callbacks.\nfunction mod:OnEntityTakeDmg(ent, amount, flags, source, countdown)\n    if ent:ToNPC() then\n        return {Damage = amount * 0.5}\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, mod.OnEntityTakeDmg)\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/taking_damage/#safefake-player-damage","title":"Safe/Fake player damage","text":"<p>Certain DamageFlags will prevent the player from losing devil or angel deal chance. The game uses this for things such as the curse room door. Detecting these sources can be seen within the <code>flags</code> parameter. You can also modify the damage taken to use these flags yourself.</p> <ul> <li><code>DamageFlag.DAMAGE_NO_PENALTIES</code> will prevent any penalties to the player, such as lowering devil deal chance or resetting Perfection progress. This and <code>DamageFlag.DAMAGE_RED_HEARTS</code> will prevent rerolls from being trigered on Tainted Eden.</li> <li><code>DamageFlag.DAMAGE_FAKE</code> will not decrease Isaac's health, but can still trigger on-damage effects with the amount of damage that would've been taken. This is used by Dull Razor.</li> </ul> <p>You can check, add, and remove bitflags using bitwise operations. You don't have to learn the exact details of how they work in order to utilize them, just remember what they do. The order in which they're positioned matters! <pre><code>--Returns `true` if flag2 is present inside flag1. Returns `0` otherwise.\nflag1 &amp; flag2 == flag2\n\n--Combines flag1 and flag2. The \"|\" can be repeated for combining multiple flags.\nflag3 = flag1 | flag2\n\n--Removes flag2 from flag1\nflag1 = flag1 &amp; ~flag2\n</code></pre> This code turns all player damage into no-penalty damage. <pre><code>function mod:OnEntityTakeDmg(ent, amount, flags, source, countdown)\n    --Checks that the flag doesn't already have penalties removed.\n    if ent:ToPlayer() and flags &amp; DamageFlag.DAMAGE_NO_PENALTIES == 0 then\n        --Deal damage with no penalties added to the original set of flags.\n        player:TakeDamage(amount, flags | DamageFlag.DAMAGE_NO_PENALTIES, source, countdown)\n        --Cancel the original damage.\n        return false\n    end\nend\n\nmod:AdCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, mod.OnEntityTakeDmg, EntityType.ENTITY_PLAYER)\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/entities/trails/","title":"Trails","text":"<p>Repentance introduced a new effect named <code>SPRITE_TRAIL (166)</code>. This effect is used by the eyeballs shout out by Maze Roamers. This trail can be applied to any entity.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua","REPENTOGON"]},{"location":"tutorials/entities/trails/#applying-the-trail","title":"Applying the trail","text":"<p>To apply the trail to an entity, you must spawn the trail then set its parent. You can also set the <code>MinRadius</code> property to change how long the base of the trail is, and the <code>SpriteScale</code> to change thickness. The following code example creates a long, green trail.</p> <pre><code>local entityParent = ... -- Set this to the parent of the trail \nlocal trail = Isaac.Spawn(EntityType.ENTITY_EFFECT, EffectVariant.SPRITE_TRAIL, 0, entityParent.Position, Vector.Zero, entityParent):ToEffect()\ntrail:FollowParent(entityParent)\ntrail.Color = Color(0, 1, 0, 1)\ntrail.MinRadius = 0.25\ntrail.SpriteScale = Vector.One\n</code></pre> Warning <p>Setting the trail's color to black will make it invisible. This is because the trail's sprite is set to blend additively.   The blending mode can only be changed with REPENTOGON.</p> <pre><code>-- REPENTOGON example to change the blending mode.\nlocal entityParent = ... -- Set this to the parent of the trail\nlocal trail = Isaac.Spawn(EntityType.ENTITY_EFFECT, EffectVariant.SPRITE_TRAIL, 0, entityParent.Position, Vector.Zero, entityParent):ToEffect()\ntrail:FollowParent(entityParent)\ntrail.Color = Color(0, 1, 0, 1)\ntrail.MinRadius = 0.25\ntrail.SpriteScale = Vector.One\n\nlocal sprite = trail:GetSprite()\nlocal blendMode = sprite:GetLayer(0):GetBlendMode()\nblendMode:SetMode(BlendType.NORMAL)\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua","REPENTOGON"]},{"location":"tutorials/general/controller_input/","title":"Controller input","text":"<p>Game controllers can complicate detecting arbitrary button presses.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/general/controller_input/#controller-detection","title":"Controller detection","text":"<p>Controllers can easily be detected by reading the <code>ControllerIndex</code> property of the player. If it is above <code>0</code>, then the player must be using a controller, as <code>0</code> is always the <code>ControllerIndex</code> of the keyboard. <pre><code>local player = Isaac.GetPlayer(0)\nprint(player.ControllerIndex)\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/general/controller_input/#controllers-and-inputisbuttontriggeredpressed","title":"Controllers and <code>Input.IsButtonTriggered/Pressed()</code>","text":"<p>Controllers can be detected by <code>Input.IsButtonTriggered()</code> and <code>Input.IsButtonPressed()</code>, but not without some caveats.</p> <p>Firstly, controller inputs don't have a value in the <code>Keyboard</code> enum, but they do have a number which corresponds to what button you're pressing. <pre><code>local controllerButtons = {\n    DPAD_LEFT = 0,\n    DPAD_RIGHT = 1,\n    DPAD_UP = 2,\n    DPAD_DOWN = 3,\n    ACTION_DOWN = 4,\n    ACTION_RIGHT = 5,\n    ACTION_LEFT = 6,\n    ACTION_UP = 7,\n    BUMPER_LEFT = 8,\n    TRIGGER_LEFT = 9,\n    STICK_LEFT = 10,\n    BUMPER_RIGHT = 11,\n    TRIGGER_RIGHT = 12,\n    STICK_RIGHT = 13,\n    SELECT = 14,\n    START = 15\n}\n</code></pre></p> <p>Secondly, controllers trigger multiple values at once. Pressing a button on the controller will trigger 4 different values in the <code>Keyboard</code> enumerator. This can cause complications for detecting keyboard input, because a controller can trigger a value that you're not expecting.</p> <p></p> Reproduction code <pre><code>local mod = RegisterMod(\"Input test mod\", 1)\n\nmod:AddCallback(ModCallbacks.MC_POST_RENDER, function ()\n    for i, v in pairs(Keyboard) do\n        if Input.IsButtonTriggered(v, Isaac.GetPlayer().ControllerIndex) then\n            print(\"Enum\", i, \"pressed with value\", v, \"and with a true value of\", v % 32)\n        end\n    end\nend)\n</code></pre> <p>To detect if a keyboard button was triggered by a controller, you can modulo the input by 32. This will always return the correct value of the button pressed. <pre><code>local function safeKeyboardTriggered(key, controllerIndex)\n    return Input.IsButtonTriggered(key, controllerIndex) and not Input.IsButtonTriggered(key % 32, controllerIndex)\nend\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","Lua"]},{"location":"tutorials/general/internal_item_descriptions/","title":"Internal item descriptions","text":"","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#introduction","title":"Introduction","text":"<p>Internal Item Descriptions is the newest addition to Repentance+, being its own version of External Item Descriptions. It will display detailed information on collectibles, trinkets, pills, and cards when approaching them in a room or viewing them within the \"My Stuff\" menu. It allows for additional information that will only display based on custom conditions.</p> <p>Modding support for Internal Item Descriptions is limited, but can still be used.</p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#adding-custom-descriptions","title":"Adding custom descriptions","text":"<p>All custom item descriptions are defined in an <code>info_display.xml</code> file, located in the <code>content</code> folder at the root of your mod folder. Mods can create the <code>collectibles</code> tag and the <code>trinkets</code> tag.</p> <p>These tags have no properties, and are intended to be filled with their corresponding child tags <code>collectible</code> or <code>trinket</code> respectively. The only property these tags have is <code>id</code>, which must correspond to the <code>id</code> defined for your item in your mod's <code>items.xml</code>. These child tags have their own child tag, <code>info</code>, where you'll write your descriptions under the <code>text</code> property.</p> No descriptions for cards and pills <p>The <code>id</code> variable inside <code>pocketitems.xml</code> currently does not supported modded content. As such, you cannot define custom descriptions for cards, runes, objects, or pills.</p> <p><code>items.xml</code>: <pre><code>&lt;items gfxroot=\"gfx/items/\" version=\"1\" deathanm2=\"gfx/death items.anm2\"&gt;\n    &lt;passive id=\"0\" name=\"The Placeholder\" description=\"He placeholds!\" gfx=\"placeholder.png\" /&gt;\n&lt;/items&gt;\n</code></pre></p> <p><code>info_display.xml</code>: <pre><code>&lt;collectibles&gt;\n    &lt;collectible id=\"0\"&gt;\n        &lt;info text=\"Be cool and epic\"/&gt;\n    &lt;/collectible&gt;\n&lt;/collectibles&gt;\n</code></pre></p> <p>Result:</p> <p> </p> \"My Stuff\" display bug <p>Any modded \"death item\" sprites will appear extremely offset up and to the left from its expected location in the My Stuff menu. Trinkets will also appear in this menu if consumed via Smelter or similar methods, but there is no support for giving modded trinkets a death item sprite.</p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#info-tag","title":"<code>info</code> tag","text":"<p>The info tag contains the text to display as a bullet point and can be set to display only under certain conditions.</p> <code>info</code> tag variables Note <p>All variables only accept vanilla IDs. Modded content is currently unsupported.</p> Variable Name Possible Values Description text string The description for a single bullet point of text collectible int <code>text</code> will only be visible if the player has the corresponding collectible. notcollectible int <code>text</code> will only be visible if the player does NOT have the corresponding collectible. player int Comma-separated list of PlayerTypes. <code>text</code> will only be visible if the first player is any of the listed PlayerTypes. notplayer int Comma-separated list of PlayerTypes. <code>text</code> will only be visible if the first player is NOT any of the listed PlayerTypes. tag int For use with trinkets and pills for golden trinkets and Horse Pills respectively. See Synergies for more information. <p>Below is an example of multiple lines of text for our item. The first line is always present, the second line requires you have Sad Onion, and the last line requires you don't. <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"+1 Epic Point\"/&gt;\n    &lt;info notcollectible=\"1\" text=\"Enemies will cower before you\"/&gt;\n    &lt;info collectible=\"1\" text=\"Enemies will be sympathetic towards you.\"/&gt;\n&lt;/collectible&gt;\n</code></pre> </p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#xml-modifiers","title":"XML modifiers","text":"<p>XML files use specific symbols for formatting its markup. To insert the characters into text without disrupting the XML format, the following series of characters can be used:</p> Name Character set Result Quotation <code>&amp;quot;</code> \" Apostrophe <code>&amp;apos;</code> ' Less than <code>&amp;lt;</code> &lt; Greater than <code>&amp;gt;</code> &gt; Ampersand <code>&amp;amp;</code> &amp;","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#text-modifiers","title":"Text modifiers","text":"<p>Inside the <code>text</code> string in an <code>info</code> tag, you can insert a specific variable between <code>&amp;lt;</code> and <code>&amp;gt;</code> to create a special modification to the description.</p> <p>There are 6 modifiers:</p> <ul> <li><code>player</code> for displaying player heads.</li> <li><code>pickup</code> for displaying pickup icons.</li> <li><code>rooms</code> for displaying room map icons.</li> <li><code>collectible</code> for display vanilla item sprites.</li> <li><code>color</code> for changing text color.</li> <li><code>size</code> for changing text size.</li> </ul> <p><code>info_display.xml</code>: <pre><code>&lt;collectibles&gt;\n    &lt;collectible id=\"0\"&gt;\n        &lt;info text=\"&amp;lt;player=0&amp;gt; I'm Isaac!\"/&gt;\n        &lt;info text=\"&amp;lt;pickup=bomb&amp;gt; I start with 1 bomb.\"/&gt;\n        &lt;info text=\"&amp;lt;rooms=9&amp;gt; I need to find the boss...\"/&gt;\n        &lt;info text=\"&amp;lt;collectible=1&amp;gt; This is my pet onion.\"/&gt;\n        &lt;info text=\"It makes me very&amp;lt;color=0xFFf6ff00&amp;gt; happy!\" /&gt;\n        &lt;info text=\"&amp;lt;size=0.25&amp;gt;okay bye\" /&gt;\n    &lt;/collectible&gt;\n&lt;/collectibles&gt;\n</code></pre></p> <p>Result:</p> <p></p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#player","title":"player","text":"<p><code>player</code> is used for displaying vanilla character heads. The vanilla game doesn't use this at all, but mods can take advantage of it. The value used to choose what icon to display correlates to the frames inside <code>gfx/ui/text_icons.anm2</code> file under the \"players\" animation. The first frame is Isaac's head, so <code>player=0</code> will display Isaac's head inside of descriptions.</p> <p>Below is an example of our item displaying a multitude of player heads: <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"This is Isaac: &amp;lt;player=0&amp;gt;\"/&gt;\n    &lt;info text=\"Here are his friends:&amp;lt;player=1&amp;gt;&amp;lt;player=5&amp;gt;&amp;lt;player=26&amp;gt;\"/&gt;\n&lt;/collectible&gt;\n</code></pre> </p> Player head values Value Icon name 0 Isaac 1 Magdalene 2 Cain 3 Judas 4 ??? (Blue Baby) 5 Eve 6 Samson 7 Azazel 8 Lazarus 9 Eden 10 The Lost 11 Lazarus (again) 12 Judas (again) 13 Lilith 14 The Keeper 15 Apollyon 16 The Forgotten 17 The Forgotten (again) 18 Bethany 19 Jacob (no Esau) 20 Jacob (no Esau) (again) 21 Tainted Isaac 22 Tainted Magdalene 23 Tainted Cain 24 Tainted Judas 25 Tainted ??? (Tainted Blue Baby) 26 Tainted Eve 27 Tainted Samson 28 Tainted Azazel 29 Tainted Lazarus 30 Tainted Eden 31 Tainted The Lost 32 Tainted Lilith 33 Tainted The Keeper 34 Tainted Apollyon 35 Tainted The Forgotten 36 Tainted Bethany 37 Tainted Jacob 38 Tainted Lazarus (again) 39 Tainted Jacob (again) 40 Tainted The Forgotten (again)","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#pickup","title":"pickup","text":"<p><code>pickup</code> is used for displaying pickup icons. The vanilla game doesn't use this at all, but mods can take advantage of it. While the pickups displayed are the frames inside the \"pickups\" animation within <code>gfx/ui/text_icons.anm2</code>, <code>pickup</code> expects one of 6 specific strings. Providing anything besides these strings displays the coin icon.</p> <p>Below is an example of our item displaying a multitude of pickup icons: <pre><code>&lt;collectible id=\"0\"&gt;\n        &lt;info text=\"&amp;lt;pickup=bomb&amp;gt; Boom!\"/&gt;\n        &lt;info text=\"A few other pickups: &amp;lt;pickup=coin&amp;gt;&amp;lt;pickup=key&amp;gt;&amp;lt;pickup=blackheart&amp;gt;\"/&gt;\n&lt;/collectible&gt;\n</code></pre> </p> Pickup icon values Value Icon name coin A penny key A key bomb A bomb redheart A full red heart soulheart A full soul heart blackheart A full black heart","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#rooms","title":"rooms","text":"<p><code>rooms</code> is used for displaying room icons. The vanilla game only uses this for Teleport 2.0. The value used to choose what icon to display correlates to the frames inside <code>gfx/ui/text_icons.anm2</code> file under the \"rooms\" animation. The first frame is the shop icon, so <code>rooms=0</code> will display the shop icon inside of descriptions.</p> <p>Below is an example of our item displaying a multitude of room icons: <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"This is a Shop Icon:&amp;lt;rooms=0&amp;gt;\"/&gt;\n    &lt;info text=\"This are several Treasure Room icons:&amp;lt;rooms=4&amp;gt;&amp;lt;rooms=19&amp;gt;&amp;lt;rooms=22&amp;gt;\"/&gt;\n&lt;/collectible&gt;\n</code></pre> </p> Room icon values Note <p>Frames 25-85 will appear much smaller than they should, and will cause all other icons in all other descriptions to appear the same shrunken size. This is in part due to the icons not being cropped properly inside the animation file.</p> Value Icon name 0 Shop 1 Secret Room 2 Super Secret Room 3 Library 4 Treasure Room 5 Angel Room 6 Devil Room 7 Dice Room 8 Mini-Boss Room 9 Boss Room 10 Challenge Room 11 Boss Challenge Room 12 Curse Room 13 Sacrifice Room 14 Arcade 15 Vault 16 Isaac's Bedroom 17 Barren Bedroom 18 Locked Room 19 Greed (Silver) Treasure Room 20 Planetarium 21 Teleporter Room 22 Red Treasure Room (Devil's Crown) 23 Crawlspace 24 Heart 86 Default Room 87 Error Room","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#collectible","title":"collectible","text":"<p><code>collectible</code> is used for displaying any vanilla item sprite. The vanilla game doesn't use this at all, but mods can take advantage of it. The value used represents the item's ID. Invalid item IDs will show no sprite.</p> <p>Note that while you can put in an ID that extends beyond vanilla's maximum item ID, and this ID can make the description show a modded item sprite, modded item IDs shift around depending on what mods are enabled, so this cannot be used to reliably show a modded item sprite.</p> <p>Below is an example of our item displaying a multitude of items: <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"The iconic pet onion: &amp;lt;collectible=1&amp;gt;\"/&gt;\n    &lt;info text=\"Some other items:&amp;lt;collectible=14&amp;gt;&amp;lt;collectible=654&amp;gt;&amp;lt;collectible=571&amp;gt;\"/&gt;\n&lt;/collectible&gt;\n</code></pre> </p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#color","title":"color","text":"<p><code>color</code> will accept a hexadecimal (shortened as \"hex\") value to change the color of the text. <code>color</code> is commonly used for synergies/interactions with special items, such as Abyss and Book of Virtues.</p> <p>The structure of the color hex code \"0xFFf833ff\" (pink) is as follows:</p> <ul> <li><code>0x</code> (characters 1-2): The game is written in C++ and stores colors in hex. Hex is defined starting with <code>0x</code>.</li> <li><code>FF</code> (characters 3-4): This represents the alpha (transparency) of text. The RGB color format represents red, green, blue, and alpha values from 0 to 255. <code>FF</code> in hex translates to 255 in decimal (our standard numeral system).</li> <li><code>f8</code> (characters 5-6): This represents the \"red\" value. \"f8\" in hex is 170 in decimal.</li> <li><code>33</code> (characters 7-8): This represents the \"blue\" value. \"33\" in hex is also 33 in decimal.</li> <li><code>ff</code> (characters 9-10): This represents the \"green\" value. \"ff\" in hex is 255 in decimal</li> </ul> <p>Below is an example of a custom color, and of our item having a red text color modifier while Abyss is held. <pre><code>&lt;collectibles&gt;\n    &lt;collectible id=\"0\"&gt;\n        &lt;info text=\"+1 Epic Point\"/&gt;\n        &lt;info text=\"&amp;lt;color=0x2545c1ff&amp;gt;You can barely see me!\"/&gt;\n        &lt;info collectible=\"706\" text=\"&amp;lt;color=0xFFc30404&amp;gt;x1 epic locust 1x Isaac's damage\"/&gt;\n    &lt;collectible /&gt;\n&lt;/collectibles&gt;\n</code></pre> </p> <p>Below are all of the hex codes used in vanilla:</p> <ul> <li><code>0xFFc30404</code>: Abyss locusts/No effect.</li> <li><code>0xFF4bb3e4</code>: Book of Virtues wisps.</li> </ul>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#size","title":"size","text":"<p><code>size</code> accepts a float that changes the size of the text. The vanilla game doesn't use this at all, but mods can take advantage of it. <code>0.5</code> is the default size of text, so any number lower will make the text smaller and vice versa.</p> <p>Below is an example of our item with multiple lines of different font sizes: <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"&amp;lt;size=0.25&amp;gt;I'm half the size!\"/&gt;\n    &lt;info text=\"&amp;lt;size=0.5&amp;gt;I'm normal...\"/&gt;\n    &lt;info text=\"&amp;lt;size=1&amp;gt;I'm twice the size!\"/&gt;\n&lt;/collectible&gt;\n</code></pre> </p> Text overlapping <p>Larger font sizes can overlap with text on the next line. <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"&amp;lt;size=1&amp;gt;I'm twice the size! Look at me!\"/&gt;\n    &lt;info text=\"&amp;lt;size=0.5&amp;gt;I'm being overlapped...\"/&gt;\n&lt;/collectible&gt;\n</code></pre></p> <p></p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#synergies","title":"Synergies","text":"<p>For each type of item, there are specific important synergies that should be kept in mind. They should be included with the majority of descriptions of that type. Below is a list of synergies for each item type and how to implement them.</p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#collectible_1","title":"collectible","text":"<p>Abyss</p> <p>The locust familiars that spawn when Abyss is used on the item.</p> <p>Description layout: \"x[Amount of locusts spawned] [locust type, if any] locust, x[damage multiplier] Isaac's damage\".</p> <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"Bring me Abyss for a new line\"/&gt;\n    &lt;info collectible=\"706\" text=\"&amp;lt;color=0xFFc30404&amp;gt;x1 poison locust 1x Isaac's damage\"/&gt;\n&lt;/collectible&gt;\n</code></pre> <p>Book of Virtues</p> <p>The wisp familiars that spawn when Book of Virtues is used with the active item.</p> <p>Description layout: \"x[Amount of wisps spawned] [wisp layer] wisp - [HP amount] hp - [Damage dealt] damage\".</p> <pre><code>&lt;collectible id=\"0\"&gt;\n    &lt;info text=\"Bring me Book of Virtues for a new line\"/&gt;\n    &lt;info collectible=\"584\" text=\"&amp;lt;color=0xFF4bb3e4&amp;gt;x1 middle wisp - 2 hp - 3 damage\"/&gt;\n&lt;/collectible&gt;\n</code></pre>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#trinket","title":"trinket","text":"<p>Mom's Box/Golden Trinket</p> <p>The increased effect of a trinket when the player has Mom's Box, or is a golden variant of the trinket. Having multiple of the same trinket will also enact these effects, but is not used within vanilla descriptions. The <code>tag</code> variable can be used with trinkets, where setting it to <code>2</code> is a default description and <code>1</code> is a golden trinket description.</p> <p>There's a default description, two copies of the same description to display for Mom's Box or a golden trinket, and a final description for both: <pre><code>&lt;trinket id=\"0\"&gt;\n    &lt;info notcollectible=\"439\" tag=\"2\" text=\"Spawns a coin each time Isaac takes damage\"/&gt;\n    &lt;info notcollectible=\"439\" tag=\"1\" text=\"Spawns 2 coins each time Isaac takes damage\"/&gt;\n    &lt;info collectible=\"439\" tag=\"2\" text=\"Spawns 2 coins each time Isaac takes damage\"/&gt;\n    &lt;info collectible=\"439\" tag=\"1\" text=\"Spawns 3 coins each time Isaac takes damage\"/&gt;\n&lt;/trinket&gt;\n</code></pre></p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/internal_item_descriptions/#dynamic-stats","title":"Dynamic stats","text":"<p>Descriptions automatically display any stats that your item grants upon pickup. It does this by calling the <code>EvaluateItems</code> function internally whenever you're close to the item, which in turn triggers <code>MC_EVALUATE_CACHE</code> multiple times per second.</p> <p>As long as your item or trinket has any entry in <code>info_display.xml</code>, the dynamic stats will be able to show up.</p>","tags":["Tutorial","Beginner friendly","Repentance+","No Lua","XML"]},{"location":"tutorials/general/making_rooms/","title":"Making rooms","text":"","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#introduction","title":"Introduction","text":"<p>To create rooms for Isaac, it is standard to use an unofficial room editor application named \"Basement Renovator\". Although there's an official room editor in the game files, it doesn't work with Repentance or Repentance+, and is much harder to use compared to Basement Renovator. Even the Repentance developers used a modified version of Basement Renovator to make rooms!</p> Note <p>This guide is written for Windows users. There might be extra steps not listed here for Mac or Linux systems.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#basement-renovator-usage","title":"Basement Renovator Usage","text":"","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#installing-basement-renovator","title":"Installing Basement Renovator","text":"<p>Basement Renovator is hosted on Github. Downloading it goes as follows: 1. Navigate to the releases page on the Basement Renovator repository by clicking here: https://github.com/Basement-Renovator/basement-renovator/releases 2. The first thing you see should have a green label saying \"Latest\". This is the most recent version of Basement Renovator. Basement Renovator does not automatically update, so make sure you check back here every so often! 3. Within this release, scroll until you see the \"Assets\" dropdown menu, and click the \"BasementRenovator.zip\" file to download the <code>.zip</code> archive containing the application.</p> <p> </p> <ol> <li>Finally, extract the contents of this <code>.zip</code> archive into a new folder anywhere on your PC. You can use applications like 7-Zip or WinRaR to do this, though your operating system may already have an option built in to extract when you right-click the archive. You can delete the <code>.zip</code> archive after you're done extracting the files if you'd like.</li> </ol> <p> </p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#room-list","title":"Room List","text":"<p>Before you can start placing entities, first you need to create a room.</p> <p>On the right of the screen, you should see your room list. At the bottom of this menu, you can hit \"Add\" to create a new room. You can select this room to edit by left-clicking on it in the list, or right-click it to configure it. Double-click the room on the list or press F2 to rename it.</p> <p> </p> <ol> <li>This dropdown menu lets you change the room type (normal, secret, error, etc.)</li> <li>The ID is used to differentiate the room from other rooms internally. Press <code>Ctrl + B</code> to automatically increment room IDs starting from the first ID in the list.</li> <li>Difficulty determines how the room shows up. These are expected to be specific numbers, and are chosen as a matter of opinion. You'll get a feel for what rooms should be what difficulty over time. The difficulties mean as follows:<ul> <li>Difficulty 0 rooms cannot appear naturally in game.</li> <li>Difficulty 1 rooms are basic rooms with either no enemies, or enemies that propose no real threat. They only appear on the first floor of a stage, and are more common on Normal difficulty.</li> <li>Difficulty 5 rooms are basic rooms with a few enemies or hazards. They can appear on both floors in a stage, but are less common on the second floor in Hard mode.</li> <li>Difficulty 10 rooms are starting to get tough, with some harder enemies or hazards here and there. These rooms appear on the second floor in Normal mode, and on both floors in Hard mode.</li> <li>Difficulty 15 rooms are very tough and require focus to clear without taking damage. They can only spawn on the second floor of a stage and only in Hard mode.</li> <li>Difficulty 20 rooms can only appear in Void.</li> </ul> </li> <li>Weight determines how common a room is. Weight is a fractional number starting at 1.00, with rooms of weight 0 never appearing. There's almost no scenario where this needs to be above 1.00.</li> <li>Sub determines the subtype of the room. Subtype can alter many different things (such as how the room generates or its appearance) depending on the room type and stage the room is appearing on. For an in-depth guide on room subtypes, click here.</li> <li>This dropdown menu lets you change the shape of the room.</li> </ol> <p>At the bottom of the rooms list, you can press \"Delete\" to delete the room, and \"Duplicate\" to create a copy of the room. Hold ALT to change \"Duplicate\" to \"Mirror X\", which duplicates the room and flips it on the x-axis. Hold ALT and SHIFT to change \"Duplicate\" to \"Mirror Y\", which duplicates the room and flips it on the y-axis. If the text ever gets stuck as \"Mirror X\" or \"Mirror Y\" (usually as a result of using the ALT + TAB shortcut on Windows), simply press ALT again to set it back to normal.</p> <p>The \"Copy to File\" button allows you to copy a room from your room list to a different <code>.xml</code> file, or into a brand new <code>.xml</code> file. Click here to read more about how rooms are saved.</p> <p>Finally, the top of the rooms list has many tools that you can use to filter through your rooms. You can filter by numerical ID or room name, search for rooms with the currently selected entity, search by room type, search by room size, or right-click the final box to the right to view an expanded filter menu. The red box under any of these filter buttons lets you know that the filter is currently enabled. Click this red box to disable the filter.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#entity-palette","title":"Entity Palette","text":"<p>The Entity Palette is what allows you to select entities that you can place in a room. The top of the Palette has various tabs that contain different types of entities. There's also collapsable groups within each tab that can hold any type of entity.</p> <p> </p> <p>To add modded entities to Basement Renovator, create a <code>basementrenovator</code> folder in your mod's folder. Within this folder, create a file named <code>EntitiesMod.xml</code>, and a folder to hold all of the entity icons.</p> <p> </p> Mod path info <p>Basement Renovator will attempt to automatically locate your mods folder, where it'll import every entity configured to show up in Basement Renovator from your active mods. Before launching Basement Renovator, make sure the mods with the entities you want to make rooms with are enabled. Afterwards, if those entities still are not appearing anywhere in the Entity Palette (even if you search for their name), it may be because the <code>InstallFolder</code> is not set up to point to your mods folder.</p> <p>In the same directory as Basement Renovator, you should see a file called <code>settings.ini</code> that is generated upon launching the application for the first time. It's a text file containing a few settings.</p> <p>You can look into this file to see if the <code>InstallFolder</code> setting is equal to the path to your mods folder. Here's how to check:</p> <ol> <li>Open up <code>settings.ini</code> in a text editor like Notepad.</li> <li>Look for the <code>InstallFolder=</code> setting, and see if the the file path is correct. It should similar to this if it is (though your mods folder path is likely different from mine):</li> </ol> <p><p> Note that there should be an extra backslash before every backslash in the file path! </p></p> <ol> <li>If the file path does not look right, you must navigate to it and type in the file path.<ol> <li>Open the game's directory (click the gear on the game in your Library in Steam, hover over Manage, then Browse Local Files).</li> <li>Click on the <code>mods</code> folder.</li> <li>Click on the box holding the file path to copy it as text.</li> <li>Paste it after <code>InstallFolder=</code> in <code>settings.ini</code>, but make sure to add an extra backslash behind every backslash!</li> </ol> </li> </ol> <p><p> </p></p> DLC support <p>When Basement Renovator added support for Repentance+, the default DLC that Basement Renovator targets changed. Some mods decide what versions their entities can show up in manually using a file named <code>VersionsMod.xml</code>.</p> <p>If you're trying to make rooms for a mod that has done this but hasn't added support for Repentance+, you can manually specify which DLC Basement Renovator is making rooms for by editing your <code>settings.ini</code> file.</p> <ol> <li>Navigate to the directory Basement Renovator is in and open the <code>settings.ini</code> file in a text editor such as Notepad. This file is generated upon launching Basement Renovator for the first time.</li> <li>Then, add a new line at the bottom with the text \"CompatibilityMode=\", and then the name of the DLC you want to target. In most cases where you're switching off of Repentance+, this should just be \"Repentance\".</li> </ol> <p><p> </p></p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#room-editor","title":"Room Editor","text":"<p>Select an entity from the Entity Palette and right-click anywhere in the room to place it. You can press CTRL + G to toggle the grid visuals. You can also left-click and drag to select multiple entities at once.</p> <p>Sometimes it is necessary to place entities in walls. By default, Basement Renovator will not allow you to do this. To fix this, hit the Edit button at the top, then untick \"Snap to Room Boundaries\".</p> <p> </p> <p>Placing multiple entities on top of each other does not spawn them all on the same tile, instead making the game choose randomly between the entities placed on the tile. You can control the weight of each entity on the tile to determine how often it'll be chosen to spawn over the other entities. Click on the title with the stacked entities, and edit the numbers. The chance of an enemy spawning is the weight divided by the sum of all weights. For example, if you have an entity of weight <code>1.00</code> stacked with two other entities of the same weight, the chance will be 33%.</p> <p> </p> <p>Certain vanilla entities like the Ball and Chain can be middle-clicked to configure extra properties. Mods can also use this functionality, though this won't be explained in depth in this tutorial.</p> <p> </p> <p>You can double-click doors to disable them. Disabling all doors will make the room not show up naturally, but will also crash the game if playtested. Double-check that doors that cannot be entered are disabled!</p> <p>Lastly, the name of the file being edited determines the backdrop for normal rooms. For example, having \"dross\" in the file name will put you in Dross while testing and editing in Basement Renovator.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#testing-rooms","title":"Testing rooms","text":"<p>To test a room, press the \"Test\" button at the top and then click \"Test Current Room - Instapreview\". This'll open an alert dialog and launch Isaac. Pressing \"Okay\" in this dialog will close the game. This dialog prevents you from editing rooms in Basement Renovator, and can be disabled by clicking the \"Enable Test Mod Dialog\" tickbox. You can also disable the in-game text at the bottom-left corner by the \"Disable In-Game UI\" tickbox here.</p> <p>The \"Test Configuration\" button takes you to a menu that lets you set which character you're playing as, as well as add some commands to run automatically when entering the room. Generally, it's recommended to give yourself certain items when testing rooms for certain floors in order to keep things balanced, although this is a matter of opinion. Read this Google Doc to see the recommended testing loadouts for mods like Fiend Folio.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#adding-rooms-to-your-mod","title":"Adding rooms to your mod","text":"<p>The game expects <code>.stb</code> files to be placed in the <code>rooms</code> folder within your mod's <code>content</code> folder. Basement Renovator will save rooms to both <code>.xml</code> and <code>.stb</code> format (press CTRL + S), although the <code>.xml</code> file is used solely for easy editing and is not read by the game. Make sure the <code>.stb</code> file is named the exact same as the stage you're adding those rooms to.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#room-design","title":"Room Design","text":"<p>There is no \"correct\" way to design rooms, therefore this section is ultimately a matter of opinion. Regardless, there are a few things you should look out for when making rooms in order to keep them fair, and to keep them up to standard with vanilla Repentance rooms.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#placement","title":"Placement","text":"<p>Be wary of placing rocks, bomb rocks, or mushrooms near doors. It feels unfair to players to enter a room and immediately take damage to a bomb rock or harmful mushroom because of something that can break those tiles, such as the Stompy transformation. There is a non-replaceable rock tile for the purpose of preventing harmful rocks from appearing if you need it.</p> <p>Additionally, try not to place enemies right in the way of doors. Placing an enemy too close to a door can give the player a very short window to react to an attack, or can cause the player to instantly run into the enemy when entering the room. Ideally, the player should be able to stand still for at least a full second before needing to dodge enemies.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#block-disabled-doors","title":"Block disabled doors","text":"<p>In vanilla, rooms tend to block door entrances that are disabled with some sort of grid tile. This is because just leaving the door unblocked can be confusing to players when they're looking for Secret rooms. Note that even when there are enemies at a disabled entrance that would signal to the player that the entrance is likely disabled, it'll become much less apparent that the door is meant to be blocked after the room has been cleared.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#unavoidable-damage","title":"Unavoidable damage","text":"<p>Avoid layouts where the player can get cornered in a way that is unfair, difficult, or impossible to avoid without taking damage. Most vanilla rooms try to give the player an adequate amount of space to evade attacks depending on what enemies the room contains.</p> <p>Additionally, avoid situations where the player takes damage and has no means of avoiding it. This can happen for many reasons, such as the way the tiles are laid out, or the placement of the enemies. Consider playtesting your room with low speed or low knockback item combinations to ensure that it remains fair during most runs. As a general rule of thumb, if YOU cannot clear the room without taking damage, then the room is too hard.</p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/making_rooms/#use-entities-appropriate-for-the-stage","title":"Use entities appropriate for the stage","text":"<p>Make sure that the entity you're placing actually appears on the stage you're using it in. Basement Renovator includes some enemies that only appear in one or two rooms on a stage in that stage's category in the Entity Palette, so it may become useful to double-check how many rooms an enemy is included in on a stage in vanilla before using it.</p> <p>This can be done by selecting the entity in the Entity Palette, then sorting by that entity in the room list by clicking its icon next to the search bar.</p> <p> There are only 3 rooms in Cellar in vanilla that contain a Nightcrawler. Because of this, this enemy shouldn't be used, even though it's listed under \"Cellar\" in the Entity Palette. </p>","tags":["Tutorial","Beginner friendly","Repentance","Repentance+","No Lua"]},{"location":"tutorials/general/temporary_effects/","title":"Temporary effects","text":"<p>TemporaryEffects are an excellent tool to utilize per-player effects, doubling as save data handled automatically by the game.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/general/temporary_effects/#introduction","title":"Introduction","text":"<p>The TemporaryEffects class gives access to what is effectively an arbitrary boolean or integer unique to every player that is tied to a collectible, trinket, or null item that can be used for any desired purpose. They can be mistaken for \"innate\" collectibles or trinkets, which are invisible additions to Isaac's inventory of items, but they are entirely separate things.</p> <p>A <code>TemporaryEffect</code> exists for every collectible, trinket, and null item automatically, but do not do anything on their own. While booleans and integers and other value types can be assigned to players just fine through entity data, the unique attribute worth taking advantage of is their ability to be persistent across exiting and continuing the run, meaning freely accessible run-lasting save data handled entirely by the game.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/general/temporary_effects/#viewing-temporaryeffects","title":"Viewing TemporaryEffects","text":"<p>Open the debug console using the tilde (<code>~</code>) key and type <code>debug 12</code>, then ENTER. This will enable the \"Player Item Info\" debug flag, which is helpful for displaying various information on the first player. This tutorial will be focusing on one specific section that lets you view TemporaryEffects active on the player.</p> <p>Your screen may look like this. If it does, press TAB and it will switch to the correct view. </p> <p>Below is the correct view for this tutorial: </p> <p>When a TemporaryEffect is added to the player, it will show up on the \"Player effects\" list, as shown here: </p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/general/temporary_effects/#understanding-the-types-of-temporaryeffects","title":"Understanding the types of TemporaryEffects","text":"<p>Below is a brief explanation on the different types of TemporaryEffects that you may see in this list and what they mean. </p> <ul> <li>White text indicates a normal TemporaryEffect. It will be automatically removed upon exiting the current room.</li> <li>Yellow text indicates a persistent TemporaryEffect. It will not be removed when exiting the current room, persisting for the duration of the run, including when exiting and continuing your run.</li> <li>Cyan text with the <code>[R]</code> symbol indicates a TemporaryEffect applied to the room instead of the player. There is no visible difference between a persistent and non-persistent TemporaryEffect for rooms. They function identically to those added to players and exist for the purposes of easier accessibility, however this data cannot be accessed without   REPENTOGON.</li> <li>The name of the TemporaryEffect is self-explanatory: They display the name of their respective collectible, trinket, or null item.</li> <li>The number after the <code>x</code> is the amount of the TemporaryEffect on the player. This can be any positive or negative integer.</li> <li>The number after the <code>:</code> is the cooldown of the effect. It will have no special traits if undefined, thus showing <code>0</code>. If a cooldown above zero is defined, the number will be reduced by 1 at a rate of 30 per second (once per game tick). Upon reaching zero, the TemporaryEffect will be removed entirely, ignoring the amount of that item's effect that was present.</li> </ul>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/general/temporary_effects/#adding-persistence-or-cooldowns-to-your-items","title":"Adding persistence or cooldowns to your items","text":"<p>For making your item's effect persistent or to add a cooldown, you will need to add the appropriate variable to your item's <code>items.xml</code> entry.</p> <ul> <li><code>persistent</code> uses a boolean. Set to <code>true</code> to enable persistence for that item's TemporaryEffect.</li> <li><code>cooldown</code> uses an integer. <code>30</code> is equivalent to one second.</li> </ul> <pre><code>&lt;items gfxroot=\"gfx/items/\" version=\"1\"&gt;\n    &lt;passive id=\"1\" name=\"My Item\" gfx=\"my_item.png\" description=\"It's my item!\" persistent=\"true\" cooldown=\"30\" quality=\"0\" /&gt;\n&lt;/items&gt;\n</code></pre>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/general/temporary_effects/#adding-temporaryeffects","title":"Adding TemporaryEffects","text":"<p>To add a TemporaryEffect to a player, first use <code>:GetEffects()</code> on an <code>EntityPlayer</code> object. From here, you may use the <code>AddCollectibleEffect</code>, <code>AddTrinketEffect</code>, or <code>AddNullEffect</code> function. For this tutorial, we will be utilizing AddCollectibleEffect.</p> <p>This code will add \"The Sad Onion\" collectible effect on the first possible frame of the player spawning into the run. <pre><code>local mod = RegisterMod(\"My Effects Mod\", 1)\n\nfunction mod:OnPeffectUpdate(player)\n    local effects = player:GetEffects()\n    --This will add 1 TemporaryEffect of Sad Onion. It will add the associated costume by default while the game manually accounts for increasing your tears stat if you have the effect.\n    effects:AddCollectibleEffect(CollectibleType.COLLECTIBLE_SAD_ONION)\nend\n\n--MC_POST_PLAYER_INIT is one of the earliest callbacks that run when first starting or continuing a run, so most others run after it.\n--The callback that removes non-persistent TemporaryEffects upon entering a new room is one of them, meaning we must add it afterwards.\nmod:AddCallback(ModCallbacks.MC_POST_PEFFECT_UPDATE, mod.OnPeffectUpdate)\n</code></pre></p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/general/temporary_effects/#repentogon-additions","title":"REPENTOGON additions","text":"<p>REPENTOGON adds AddCollectibleEffect, AddNullItemEffect and AddTrinketEffect directly to the EntityPlayer class as a shortcut for their respective functions under <code>TemporaryEffects</code>.</p> <p>It also adds the ability to access the <code>TemporaryEffects</code> object tied to rooms. It can be accessed through <code>Game():GetRoom():GetEffects()</code>.</p>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/general/temporary_effects/#utilizing-temporaryeffects","title":"Utilizing TemporaryEffects","text":"<p>There are several ways to interact with TemporaryEffects using the various functions provided by the API. These are all accessed through the TemporaryEffects class.</p> <ul> <li><code>HasCollectibleEffect</code>, <code>HasTrinketEffect</code>, and <code>HasNullEffect</code> return a boolean indicating whether or not the provided effect is present.</li> <li><code>GetCollectibleEffectNum</code>, <code>GetTrinketEffectNum</code>, and <code>GetNullEffectNum</code> return an integer on how many stacks of the effect are active.</li> <li><code>RemoveCollectibleEffect</code>, <code>RemoveTrinketEffect</code>, and <code>RemoveNullEffect</code> will remove 1 or more of the specified effect. Inputting <code>-1</code> will remove all instances of the effect.</li> <li><code>GetCollectibleEffect</code>, <code>GetTrinketEffect</code>, and <code>GetNullEffect</code> are separate from their \"Num\" counterparts, returning a TemporaryEffect object. You can access three variables: <code>Cooldown</code>, <code>Count</code>, and <code>Item</code>. <code>Cooldown</code> returns an integer of the effect's cooldown (<code>0</code> if no cooldown is active), <code>Count</code> returns the same as <code>GetCollectibleEffectNum</code> and their other variants, and <code>Item</code> returns the <code>ItemConfigItem</code> object associated with the TemporaryEffect.</li> </ul>","tags":["Tutorial","Intermediate","Repentance","Repentance+","REPENTOGON","Lua"]},{"location":"tutorials/repentogon/achievements/","title":"Achievements","text":"REPENTOGON article <p>This article focuses on working with REPENTOGON features.</p> <p>Achievements can lock access to content in the game that must be unlocked to access, or exist for displaying milestones. This tutorial will cover how to create custom achievements and make use of them.</p>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/repentogon/achievements/#adding-custom-achievements","title":"Adding custom achievements","text":"<p>All custom achievements are defined in an <code>achievements.xml</code> file, located in the <code>content</code> folder at the root of your mod folder. In this folder, there must be a root <code>achievements</code> tag. This tag has a <code>gfxroot</code> property, which should point to the root directory of where your achievements are stored starting from your mod's <code>resources</code> folder. This is usually <code>gfx/ui/achievement/</code>, as that's where the vanilla game stores them.</p> <pre><code>&lt;achievements gfxroot=\"gfx/ui/achievement/\"&gt;\n\n&lt;/achievements&gt;\n</code></pre> <p>When defining a new achievement, you use an <code>achievement</code> tag alongside any of the available properties below. <code>name</code> is required while all others are optional.</p> <code>achievement</code> tag variables Variable Name Possible Values Description name string Required. Name of the achievement used for the GetAchievementIdByName function (when this is not present, <code>text</code> is used instead). text string Text description of the achievement. Has no functional purpose. gfxback string Path of the <code>.png</code> sprite to use as a background paper for the achievement. hidden bool Set to <code>true</code> to make it not show the achievement popup on unlock nor display the achievement in the secrets menu. <pre><code>&lt;achievements gfxroot=\"gfx/ui/achievement/\"&gt;\n    &lt;achievement name=\"My new Achievement\" gfx=\"achievement_placeholder.png\" /&gt;\n&lt;/achievements&gt;\n</code></pre> <p>Once added, you can go into the Secrets menu and view your mod's achievements by pressing up/down.</p> <p></p>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/repentogon/achievements/#unlockinglocking-achievements","title":"Unlocking/locking achievements","text":"<p>With your achievement added, you can manage whether your achievement is locked or unlocked through the debug console or through Lua.</p>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/repentogon/achievements/#debug-console","title":"Debug console","text":"<p>For the debug console, there's two commands: <code>achievement</code> and <code>lockachievement</code>. <code>achievement</code> will unlock any achievement in the game, while <code>lockachievement</code> locks it.</p> <p> </p>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/repentogon/achievements/#lua","title":"Lua","text":"<p>Through Lua, your first step should be using Isaac.GetAchievementIdByName in order to obtain the ID for your achievement. Then, when you wish to unlock your achievement, using <code>Isaac.GetPersistentGameData()</code> will return a PersistentGameData object.</p> <p>Two of PersistentGameData's functions will be used in this tutorial:</p> <ul> <li>TryUnlock attempts to unlock any given achievement. Can optionally be given an second argument that will block the paper pop-up while still unlocking the achievement, but only for modded achievements.</li> <li>Unlocked Checks if the achievement is unlocked or not.</li> </ul> <p>Locking achievements can be done through Isaac.ExecuteCommand and using the <code>lockachievement</code> command.</p> Loading achievements before a file is selected <p>Using <code>PersistentGameData</code>'s functions before the game is loaded will modify a non-existent save file. <code>TryUnlock</code> will show the achievement unlocking, but will not unlock for any save files. <code>Unlocked</code> will always return <code>false</code>.</p> <p>Only use these functions under callbacks that would run after the game has fully loaded.</p> <p>This <code>main.lua</code> code will unlock the new achievement after collecting Sad Onion. <pre><code>local mod = RegisterMod(\"My Mod\", 1)\nlocal MY_ACHIEVEMENT = Isaac.GetAchievementIdByName(\"My new Achievement\")\nlocal persistGameData = Isaac.GetPersistentGameData()\n\n--Set this to true to block the pop-up (only for modded achievements)\nlocal SHOULD_BLOCK_POPUP = false\n\nfunction mod:OnSadOnionPickup()\n    if not persistGameData:Unlocked(MY_ACHIEVEMENT) then\n        persistGameData:TryUnlock(MY_ACHIEVEMENT, SHOULD_BLOCK_POPUP)\n    end\nend\n\nmod:AddCallback(ModCallbacks.MC_POST_ADD_COLLECTIBLE, mod.OnSadOnionPickup, CollectibleType.COLLECTIBLE_SAD_ONION)\n\n--Locking achievements are usually reserved for debugging purposes, but this is present merely for the purposes of this tutorial.\nfunction mod:OnSadOnionLose()\n    if persistGameData:Unlocked(MY_ACHIEVEMENT) then\n        Isaac.ExecuteCommand(\"lockachievement \" .. MY_ACHIEVEMENT)\n    end\nend\nmod:AddCalback(ModCallbacks.MC_POST_TRIGGER_COLLECTIBLE_REMOVED, mod.OnSadOnionLose, CollectibleType.COLLECTIBLE_SAD_ONION)\n</code></pre></p> <p></p> <p>Keep in mind that due to how the game handles achievement papers appearing, papers might not pop-up immediately and may require entering a new floor or ending a run. If the player has the \"pop-ups\" setting disabled, they won't see achievement papers at all.</p>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/repentogon/achievements/#locking-content-behind-achievements","title":"Locking content behind achievements","text":"<p>The most powerful utility of achievements is naturally locking modded content behind achievements. For any XML files that have an <code>achievement</code> variable available, you can insert the name of your achievement to prevent that content from appearing in normal gameplay unless the achievement was previously obtained.</p> <p>The following XML files have an achievement variable available to utilize:</p> <ul> <li>items.xml for locking items and trinket.</li> <li>pocketitems.xml for locking cards, runes, objects, and pills.</li> <li>challenges.xml for locking challenges.</li> <li>players.xml for locking characters.</li> </ul> <code>challenges.xml</code> achievement variables <p><code>challenges.xml</code> is a special case with multiple achievement-related variables.</p> <ul> <li><code>achievements</code> instead of <code>achievement</code> for a comma-separated list of achievements, so that multiple can be required to unlock it.</li> <li><code>unlockachievement</code> will unlock the assigned achievement after the challenge is completed.</li> <li><code>lockeddesc</code> can be used to show a special message while the achievement is locked instead of the default \"LOCKED :(\"</li> </ul> <p>This <code>items.xml</code> code will prevent this custom item from appearing in item pools until our achievement is unlocked.</p> <pre><code>&lt;items gfxroot=\"gfx/items/\" version=\"1\" deathanm2=\"gfx/death items.anm2\"&gt;\n    &lt;passive id=\"0\" name=\"The Placeholder\" description=\"He placeholds!\" gfx=\"placeholder.png\" achievement=\"My new Achievement\" /&gt;\n&lt;/items&gt;\n</code></pre>","tags":["Tutorial","Beginner friendly","Lua","XML","Repentance","Repentance+","REPENTOGON"]},{"location":"tutorials/shaders/shader_basics/","title":"Shader basics","text":"Work in progress! <p>This article is a work in progress! Some sections may be incomplete or need revising.</p> <p>Shaders are powerful tools that allow for the creation of many visual effects that would otherwise be much harder or even impossible to implement.</p> <p>This tutorial covers some shader basics to help you understand what shaders are actually doing under the hood.</p>","tags":["Tutorial","Advanced","Repentance","Repentance+","XML"]},{"location":"tutorials/shaders/shader_basics/#introduction","title":"Introduction","text":"<p>Shaders provide a set of instructions to the graphics card that specify information related to rendering. Unlike other aspects of Isaac modding, shaders are not programmed in Lua. It is therefore recommended that you have prior experience with programming, or are willing to look into the specifications of the GLSL Programming Language, which Isaac uses for writing shaders.</p> Technical Information <p>At their core, shaders are just a way of sending instructions to the graphics card. Though only fragment and vertex type shaders can be written for Isaac modding, different types of shaders are used in other applications for more advanced techniques, such as parallel processing.</p> <p>You can learn more about shaders and their applications here.</p> <p>GLSL is very similar to C-like languages, with a few key differences such as swizzling and (something else I'll remember later), but if you are comfortable working in C or any languages like it, it may be easy enough to work with. It is important to note that this is not a GLSL tutorial, and it will assume that you have a baseline understanding of it or any other C-based languages. Check the resources section for learning resources for GLSL.</p>","tags":["Tutorial","Advanced","Repentance","Repentance+","XML"]},{"location":"tutorials/shaders/shader_basics/#getting-started","title":"Getting Started","text":"<p>To start writing a custom shader, simply create a <code>shaders.xml</code> file within your mod's <code>content</code> folder. An empty example shader file can be found here.</p> <p>If opening this up seems a bit daunting at first, do not worry, we will cover all of this information in detail below.</p>","tags":["Tutorial","Advanced","Repentance","Repentance+","XML"]},{"location":"tutorials/shaders/shader_basics/#breaking-it-all-down","title":"Breaking It All Down","text":"<p>Below is the anatomy of a <code>shaders.xml</code> file:</p> <pre><code>&lt;!-- \n First, we provide a shader definition. \n The shader's name will be used to reference it in-game.\n --&gt;\n&lt;shader name=\"myShader\"&gt;\n    &lt;!-- \n         Next, we can choose to provide some shader parameters. \n         These are values you can provide to the shader\n         using the MC_GET_SHADER_PARAMS callback in-game.\n\n         Here are some examples of possible parameters:\n    --&gt;\n    &lt;parameters&gt; \n        &lt;!-- The type float can be used to input a number into your shader. --&gt;\n        &lt;param name=\"myVariable1\" type=\"float\"&gt;\n        &lt;!-- The type vec2 can be used to provide a standard 2D vector. --&gt;\n        &lt;param name=\"myVariable2\" type=\"vec2\"&gt;\n        &lt;!-- Likewise, but a 3D vector. --&gt;\n        &lt;param name=\"myVariable3\" type=\"vec3\"&gt;\n        &lt;!-- And finally, a 4D vector. --&gt;\n        &lt;param name=\"myVariable4\" type=\"vec4\"&gt;\n    &lt;/parameters&gt;\n\n    &lt;!-- \n     Finally, a Vertex and Fragment form. \n     These will be explained in further detail below. \n    --&gt;\n    &lt;vertex&gt; ... &lt;/vertex&gt;\n    &lt;fragment&gt; ... &lt;/fragment&gt;\n&lt;/shader&gt;\n</code></pre> <p>Before worrying about parameters, we must first understand how a shader works. A shader works in two parts, a fragment and a vertex shader. As the Vertex shader is not as important (asterisk, but we'll get there), we will start with the Fragment shader:</p> <pre><code>// A color \"tint\" variable.\nvarying lowp vec4 Color0;\n\n// A normalized coordinate variable.\nvarying mediump vec2 TexCoord0;\n\n// Information about the render screen (which will be explained later).\nvarying lowp vec4 RenderDataOut;\n\n// Information about the render scale.\nvarying lowp float ScaleOut;\n\n// A sample of the screen's image.\nuniform sampler2D Texture0;\n\n/* \n    All aforementioned variables are provided by the game.\n    Failure to include them in your shader may cause issues.\n\n    More information is available below this code snippet.\n*/\n\n// The main function, where you would write your code.\nvoid main(void)\n{\n    // A base color value, getting the color of the current pixel\n    vec4 Color = Color0 * texture2D(Texture0, TexCoord0);\n\n    // gl_FragColor, which returns the color to the screen \n    gl_FragColor = Color;\n}\n</code></pre> <p>The fragment shader's job is simply to output a color. It does this for every pixel of the screen. The <code>sampler2D</code> parameter is automatically provided to the shader with a sample of the screen's image. It samples the image using the built in <code>texture2D</code> function that intakes <code>TexCoord0</code> as the position of the shader. All of these parameters are automatically provided by the game.</p> Technical Information <p>Fragment shaders don't always run on every single pixel. This is only true because the shaders we are trying to make affect screenspace. </p> <p>With  REPENTOGON, it is possible to create shaders that affect only a specific sprite or area instead of the whole screen, but they are outside the scope of shader basics.</p> <p>The notable thing about <code>TexCoord0</code> is that it is a normalized 2D Vector. This means its values will only ever range from 0 to 1 in both directions.</p> <p></p> <p>Other provided values include <code>Color0</code>, which for screen-space shaders should always be white with full alpha. GLSL Color values are <code>vec4</code>, comparable to that of the Color class the game uses, where values are <code>(R, G, B, A)</code>.</p> <p>Finally, the <code>gl_FragColor</code> value returns whatever color it is set to as the output for the current pixel. It is reserved by the shader, and will always be the output value of the pixel.</p> Warning <p>A fragment shader must always set <code>gl_FragColor</code>. Not doing so will lead to unexpected results that differ between graphics cards.</p> <p>These effects can range from doing nothing and defaulting to black, to seizure inducing rapid color flashes depending on the graphics card.</p>","tags":["Tutorial","Advanced","Repentance","Repentance+","XML"]},{"location":"tutorials/shaders/shader_resources/","title":"Shader resources","text":"Work in progress! <p>This article is a work in progress! Some sections may be incomplete or need revising.</p> <p>A collection of resources helpful for learning shaders.</p> <ul> <li>Isaac Docs' Shader Tutorial</li> </ul> <p>Some resources that may not directly translate to Isaac, but can prove useful.</p> <ul> <li>The Book of Shaders Website</li> <li>LearnOpenGL, a resource for everything OpenGL</li> <li>Shadertoy, a platform for sharing shaders</li> <li>Shader Tutorial written in GLSL</li> </ul>","tags":["Advanced"]}]}